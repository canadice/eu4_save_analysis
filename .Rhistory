shiny::runApp()
dir <- "F:/OneDrive/OneDrive - Linköpings universitet/Jobb/LiU/Kurser/6. Avancerade kurser i statistik T5-6/732G12 - Data Mining/2017/Datorövningar/D1 Data"
setwd(dir)
data <- read.bmp(f = "grid
_new.bmp")
data <- read.bmp(f = "grid_new.bmp")
color_data <- as.data.frame(as.matrix(as.raster(data, max = 255)))
grey_color_data <- as.data.frame(sapply(X = color_data, FUN = function(x){
sapply(X = x, FUN = function(y){
(which(gray.colors(n = 257, start = 0, end = 1) == y)-1)/256
})
}))
View(data)
data <- read.bmp(f = "grid_new.bmp")
View(data)
data <- read.bmp(f = "grid.bmp")
data <- read.bmp(f = "grid_new.bmp")
grey_color_data <- data/255
View(grey_color_data)
View(grey_color_data)
grey_color_data <- grey_color_data[apply(X = grey_color_data, MARGIN = 1, FUN = function(x){!all(x == 0)}),]
grey_color_data <- grey_color_data[,apply(X = grey_color_data, MARGIN = 2, FUN = function(x){!all(x == 0)})]
grey_color_data_row <- split.data.frame(x = grey_color_data, f = (as.numeric(rownames(grey_color_data))-1) %/% 29)
View(grey_color_data)
grey_color_data
(as.numeric(rownames(grey_color_data))-1) %/% 29
rownames(grey_color_data)
grey_color_data_row <- split.data.frame(x = grey_color_data, f = (as.numeric(1:nrow(grey_color_data))-1) %/% 29)
grey_color_data_split <- lapply(X = grey_color_data_row, FUN = function(x){
lapply(split.data.frame(x = t(x), f = (as.numeric(1:nrow(t(x)))-1) %/% 28), FUN = t)
})
grey_color_data_list <- lapply(grey_color_data_split, FUN = function(x){
lapply(x, FUN = function(y){
matrix(y, nrow = 1, byrow = TRUE,
dimnames = list(NULL,
as.vector(matrix(sapply(X = paste0("x", 1:28),
FUN = function(x){
paste(x, 1:28, sep = "_")
}),
nrow = 1))))
})
})
grey_color_data_row <- split.data.frame(x = grey_color_data, f = (as.numeric(1:nrow(grey_color_data))-1) %/% 28)
grey_color_data_split <- lapply(X = grey_color_data_row, FUN = function(x){
lapply(split.data.frame(x = t(x), f = (as.numeric(1:nrow(t(x)))-1) %/% 28), FUN = t)
})
grey_color_data_list <- lapply(grey_color_data_split, FUN = function(x){
lapply(x, FUN = function(y){
matrix(y, nrow = 1, byrow = TRUE,
dimnames = list(NULL,
as.vector(matrix(sapply(X = paste0("x", 1:28),
FUN = function(x){
paste(x, 1:28, sep = "_")
}),
nrow = 1))))
})
})
for(i in 1:length(grey_color_data_list)){
grey_color_data_list[[i]] <- rbind.fill.matrix(lapply(grey_color_data_list[[i]], FUN = function(x){cbind(x, y = i)}))
}
raw_data <- rbind.fill.matrix(grey_color_data_list)
View(raw_data)
runApp('F:/GitHubs/number_scanner')
source("data_compiler.R")
setwd("F:/GitHubs/eu4_save_analysis")
library(shiny, quietly = TRUE)
library(shinythemes, quietly = TRUE)
library(stringr, quietly = TRUE)
require(ggplot2, quietly = TRUE)
require(dplyr, quietly = TRUE)
require(tidyr, quietly = TRUE)
require(stringr, quietly = TRUE)
require(parallel, quietly = TRUE)
require(shinycssloaders, quietly = TRUE)
source("save_scraper.R")
source("data_compiler.R")
save <- readLines(con = "C:/Users/Canadice/Documents/Paradox Interactive/Europa Universalis IV/save games/mp_Kongo1475_01_09.eu4", encoding = "ANSI", warn = FALSE)
tags <- read.csv2("tags.csv")
source("data_compiler.R")
# Imports a list of tags and responding names of nation
tags <- read.csv2("tags.csv")
##########################################################################
### Subsetting
##########################################################################
############################
### META
############################
### Starts the splitting for meta-data
# The first part of data existing in the save is trade, meta-data is located above
end <- which(str_detect(save, pattern = "^trade"))[1]
meta <- save[1:(end - 1)]
############################
### Country
############################
### Splits the save file into the nations parts, starting at the first nation
### Last list object contains the last nation information + all the rest of the save...
# Detects where to start looking for country data
start_country <- which(str_detect(save, pattern = "^countries=\\{"))
# Detects position of } as it defines end of information block.
# As the game progresses, } without any tabs are inserted resulting in the following
# solution to make the last list-object takes the whole rest of the save to the end.
# Subsets just the country data, might be unecessary.
country_data <- save[start_country:length(save)]
# Same as above with provinces
starts <- which(str_detect(country_data, pattern = "^\t[A-Z]{3}=\\{"))
ends <- c((starts-1)[-1], length(country_data))
indices <- do.call(list, mapply(seq, starts, ends))
country_data_split <- lapply(indices, FUN = function(x){country_data[x]})
############################
### Province
############################
### Splits the save file into the province parts, starting at the first province
### Last list object contains the last province information + all the rest of the save...
# Detects where to start the individual province data
starts_provinces <- which(str_detect(save, pattern = "^-[0-9]+=\\{"))
# As starts portion off the different provinces, ends are the one line before
# The list of provinces end where countries start so the last province will end on the line before
ends_provinces <- c((starts_provinces-1)[-1], start_country-1)
# Splits the data into a list of their individual province information
indices <- do.call(list, mapply(seq, starts_provinces, ends_provinces))
province_data_split <- lapply(indices, FUN = function(x){save[x]})
rm(list = c("ends", "starts", "starts_provinces", "ends_provinces", "start_country", "indices", "save"))
rm(list = c("ends", "end", "starts", "starts_provinces", "ends_provinces", "start_country", "indices", "save"))
vector = meta
information_indices <- str_detect(vector, pattern = "=") & !str_detect(vector, pattern = "[{}]")
information_indices
information <- vector[information_indices]
information
clean_information
clean_information <- str_replace_all(information, pattern = "[\t\"]", replacement = "")
clean_information
clean_information_matrix <- matrix(unlist(str_split(string = clean_information, pattern = "=")), ncol = length(clean_information), byrow = FALSE)
clean_information_matrix <- matrix(unlist(str_split(string = clean_information, pattern = "=")),
ncol = length(clean_information),
byrow = FALSE)
clean_information_matrix
clean_information <- clean_information[!(str_detect(clean_information, "[0-9]{4}\\.[0-9]{1,2}\\.[0-9]") &
!str_detect(clean_information, pattern = "date"))]
clean_information
clean_information_matrix <- matrix(unlist(str_split(string = clean_information, pattern = "=")),
ncol = length(clean_information),
byrow = FALSE)
clean_information_matrix
var_names <- clean_information_matrix[1,]
clean_information_matrix <- clean_information_matrix[,!(var_names %in% c("value", "id", "comparison", "localization", "key", "selector", "sample_count"))]
clean_information_matrix <- clean_information_matrix[,!(clean_information_matrix[1,] %in% c("value", "id", "comparison", "localization", "key", "selector", "sample_count"))]
clean_information_matrix
var_names <- clean_information_matrix[1,]
clean_information_data <- as.data.frame(t(data.frame(values = clean_information_matrix[2,], row.names = var_names)), stringsAsFactors = FALSE)
clean_information_data
num_indices <- sapply(clean_information_data, FUN = function(x){!is.na(suppressWarnings(as.numeric(x)))})
num_indices
clean_information_data[,num_indices] <- sapply(clean_information_data[,num_indices], FUN = as.numeric)
clean_information_data
meta_data <- meta_information_scraper(vector = meta)
meta_data
cl <- makeCluster(getOption("cl.cores", 4))
clusterExport(cl, varlist = c("information_finder", "province_information_scraper"))
data <- parLapply(cl = cl, X = province_data_split, fun = province_information_compiler)
stopCluster(cl)
list_vector = province_data_split[[1]]
information_indices <- str_detect(list_vector, pattern = "=") & !str_detect(list_vector, pattern = "[{}]")
information_indices
list_vector
information <- list_vector[information_indices]
information
clean_information <- str_replace_all(information, pattern = "[\t\"]", replacement = "")
clean_information
clean_information <- str_replace_all(information, pattern = "[\t\"]", replacement = "")
clean_information_matrix <- matrix(unlist(str_split(string = clean_information, pattern = "=")), ncol = length(clean_information), byrow = FALSE)
clean_information_matrix
var_names <- clean_information_matrix[1,]
if(any(duplicated(var_names))){
var_names[duplicated(var_names)] <- paste(var_names[duplicated(var_names)], 1:sum(duplicated(var_names)), sep = "")
}
clean_information_data <- as.data.frame(t(data.frame(values = clean_information_matrix[2,], row.names = var_names)), stringsAsFactors = FALSE)
clean_information_data
x = list_vector
PID <- as.numeric(str_extract(x[1], "[0-9]+"))
PID
hre <- as.character(information_finder(x, "hre="))
hre
information_indices <- str_detect(list_vector, pattern = "=") & !str_detect(list_vector, pattern = "[{}]")
information <- list_vector[information_indices]
information_indices <- str_detect(information, pattern = "^\t\t[a-z]")
information <- information[information_indices]
information
information_indices <- str_detect(list_vector, pattern = "=") & !str_detect(list_vector, pattern = "[{}]")
information <- list_vector[information_indices]
information
information_indices <- str_detect(information, pattern = "^\t\t[a-z]")
information <- information[information_indices]
clean_information <- str_replace_all(information, pattern = "[\t\"]", replacement = "")
clean_information
clean_information <- str_replace_all(information, pattern = "[\t\"]", replacement = "")
clean_information_matrix <- matrix(unlist(str_split(string = clean_information, pattern = "=")), ncol = length(clean_information), byrow = FALSE)
clean_information_matrix
