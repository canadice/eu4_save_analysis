Reduce(function(dtf1,dtf2) full_join(dtf1,dtf2, by = "PID"), .)
temp <- data[1:10] %>%
Reduce(function(dtf1,dtf2) bind_rows(dtf1,dtf2), .)
View(temp)
province_data <- data %>%
Reduce(function(dtf1,dtf2) bind_rows(dtf1,dtf2), .)
warnings()
source("data_compiler.R")
# Compiles the province data to a list, parallel processing to speed the list up
cl <- makeCluster(getOption("cl.cores", 4))
clusterExport(cl, varlist = c("information_finder", "province_information_scraper"))
data <- parLapply(cl = cl, X = province_data_split, fun = province_information_compiler)
stopCluster(cl)
# Takes all information in the list and concatenate into a data frame
province_data <- data %>%
Reduce(function(dtf1,dtf2) bind_rows(dtf1,dtf2), .)
warnings()
province_data <- data %>%
suppressWarnings(Reduce(function(dtf1,dtf2) bind_rows(dtf1,dtf2), .))
province_data <- data %>%
Reduce(function(dtf1,dtf2) suppressWarnings(bind_rows(dtf1,dtf2)), .)
View(province_data)
str_replace_all(province_data, pattern = "<U+FFD>", replacement = "Ö")
sapply(province_data, FUN = str_replace_all, pattern = "<U+FFD>", replacement = "Ö")
province_data
sapply(province_data, FUN = str_replace_all, pattern = "<U+FFFD>", replacement = "Ö")
sapply(province_data, FUN = str_replace_all, pattern = "<U\\+FFFD>", replacement = "Ö")
enc2utf8(province_data)
sapply(province_data, FUN = enc2utf8)
enc2utf8(province_data$name)
Encoding(province_data$name) <- "UTF-8"
save <- readLines(con = "C:/Users/Canadice/Documents/Paradox Interactive/Europa Universalis IV/save games/MP_RotR_latest.eu4", encoding = "UTF-8", warn = FALSE)
##########################################################################
### Splits the save file into the nations parts, starting at the first nation
### Last list object contains the last nation information + all the rest of the save...
# Detects where to start looking for country data
start_country <- which(str_detect(save, pattern = "^countries=\\{"))
# Detects position of } as it defines end of information block.
# As the game progresses, } without any tabs are inserted resulting in the following
# solution to make the last list-object takes the whole rest of the save to the end.
# Subsets just the country data, might be unecessary.
country_data <- save[start_country:length(save)]
# Same as above with provinces
starts <- which(str_detect(country_data, pattern = "^\t[A-Z]{3}=\\{"))
ends <- c((starts-1)[-1], length(country_data))
indices <- do.call(list, mapply(seq, starts, ends))
country_data_split <- lapply(indices, FUN = function(x){country_data[x]})
View(province_data)
save <- readLines(con = "C:/Users/Canadice/Documents/Paradox Interactive/Europa Universalis IV/save games/MP_RotR_latest.eu4", encoding = "ANSI", warn = FALSE)
source("data_compiler.R")
# Imports a list of tags and responding names of nation
tags <- read.csv2("tags.csv")
##########################################################################
### Splits the save file into the nations parts, starting at the first nation
### Last list object contains the last nation information + all the rest of the save...
# Detects where to start looking for country data
start_country <- which(str_detect(save, pattern = "^countries=\\{"))
# Detects position of } as it defines end of information block.
# As the game progresses, } without any tabs are inserted resulting in the following
# solution to make the last list-object takes the whole rest of the save to the end.
# Subsets just the country data, might be unecessary.
country_data <- save[start_country:length(save)]
# Same as above with provinces
starts <- which(str_detect(country_data, pattern = "^\t[A-Z]{3}=\\{"))
ends <- c((starts-1)[-1], length(country_data))
indices <- do.call(list, mapply(seq, starts, ends))
country_data_split <- lapply(indices, FUN = function(x){country_data[x]})
##########################################################################
### Splits the save file into the province parts, starting at the first province
### Last list object contains the last province information + all the rest of the save...
# Detects where to start the individual province data
starts_provinces <- which(str_detect(save, pattern = "^-[0-9]+=\\{"))
# As starts portion off the different provinces, ends are the one line before
# The list of provinces end where countries start so the last province will end on the line before
ends_provinces <- c((starts_provinces-1)[-1], start_country-1)
# Splits the data into a list of their individual province information
indices <- do.call(list, mapply(seq, starts_provinces, ends_provinces))
province_data_split <- lapply(indices, FUN = function(x){save[x]})
rm(list = c("ends", "starts", "starts_provinces", "ends_provinces", "start_country", "indices", "save"))
##########################################################################
# Compiles the province data to a list, parallel processing to speed the list up
cl <- makeCluster(getOption("cl.cores", 4))
clusterExport(cl, varlist = c("information_finder", "province_information_scraper"))
data <- parLapply(cl = cl, X = province_data_split, fun = province_information_compiler)
stopCluster(cl)
# Takes all information in the list and concatenate into a data frame
province_data <- data %>%
Reduce(function(dtf1,dtf2) suppressWarnings(bind_rows(dtf1,dtf2)), .)
View(province_data)
source('F:/GitHubs/eu4_save_analysis/save_scraper.R', echo=TRUE)
runApp()
# Compiles the country data to a list
data <- lapply(country_data_split, FUN = country_information_compiler)
# Takes all information in the list and concatenate into a data frame
country_data <- data.frame(matrix(unlist(data), ncol=ncol(data[[1]]), byrow=TRUE, dimnames = list(NULL, colnames(data[[1]]))))
# Converts the numerical country data to numeric
country_data[,4:10] <- apply(apply(country_data[,4:10], MARGIN = 2, FUN = as.character), MARGIN = 2, FUN = as.numeric)
# Merges with the province data for each of the countries' capitals
country_data <- country_data %>% left_join(province_data, by.x = "capital", by.y = "PID")
# Merges with the country name data from tags
country_data <- country_data %>% inner_join(tags, by = "Tag")
country_data <- country_data %>% left_join(province_data[, c("PID", "hre")], by.x = "capital", by.y = "PID")
country_data <- data.frame(matrix(unlist(data), ncol=ncol(data[[1]]), byrow=TRUE, dimnames = list(NULL, colnames(data[[1]]))))
country_data[,4:10] <- apply(apply(country_data[,4:10], MARGIN = 2, FUN = as.character), MARGIN = 2, FUN = as.numeric)
country_data <- country_data %>% left_join(province_data[, c("PID", "hre")], by.x = "capital", by.y = "PID")
province_data[, c("PID", "hre")]
country_data <- country_data %>% left_join(province_data[, c("PID", "hre")], by = c("capital", "PID"))
country_data <- country_data %>% left_join(province_data[, c("PID", "hre")], by = c("capital" = "PID"))
source("data_compiler.R")
# Compiles the country data to a list
data <- lapply(country_data_split, FUN = country_information_compiler)
# Takes all information in the list and concatenate into a data frame
country_data <- data.frame(matrix(unlist(data), ncol=ncol(data[[1]]), byrow=TRUE, dimnames = list(NULL, colnames(data[[1]]))))
# Converts the numerical country data to numeric
country_data[,4:10] <- apply(apply(country_data[,4:10], MARGIN = 2, FUN = as.character), MARGIN = 2, FUN = as.numeric)
# Merges with the province data for each of the countries' capitals
country_data <- country_data %>% left_join(province_data[, c("PID", "hre")], by = c("capital" = "PID"))
as.numeric(levels(information_finder(x, "^\t\tcapital=")))
x <- country_data_split[[1]]
as.numeric(levels(information_finder(x, "^\t\tcapital=")))
information_finder(x, "^\t\tcapital=")
as.numeric(information_finder(x, "^\t\tcapital="))
source("data_compiler.R")
# Takes all information in the list and concatenate into a data frame
country_data <- data.frame(matrix(unlist(data), ncol=ncol(data[[1]]), byrow=TRUE, dimnames = list(NULL, colnames(data[[1]]))))
# Converts the numerical country data to numeric
country_data[,4:10] <- apply(apply(country_data[,4:10], MARGIN = 2, FUN = as.character), MARGIN = 2, FUN = as.numeric)
# Merges with the province data for each of the countries' capitals
country_data <- country_data %>% left_join(province_data[, c("PID", "hre")], by = c("capital" = "PID"))
country_data <- data.frame(matrix(unlist(data), ncol=ncol(data[[1]]), byrow=TRUE, dimnames = list(NULL, colnames(data[[1]]))))
data <- lapply(country_data_split, FUN = country_information_compiler)
country_data <- data.frame(matrix(unlist(data), ncol=ncol(data[[1]]), byrow=TRUE, dimnames = list(NULL, colnames(data[[1]]))))
country_data[,4:10] <- apply(apply(country_data[,4:10], MARGIN = 2, FUN = as.character), MARGIN = 2, FUN = as.numeric)
country_data <- data.frame(matrix(unlist(data), ncol=ncol(data[[1]]), byrow=TRUE, dimnames = list(NULL, colnames(data[[1]]))), stringsAsFactors = FALSE)
country_data <- data.frame(matrix(unlist(data), ncol=ncol(data[[1]]), byrow=TRUE, dimnames = list(NULL, colnames(data[[1]]))))
country_data[,c(4:10, "capital")] <- apply(apply(country_data[,c(4:10, "capital")], MARGIN = 2, FUN = as.character), MARGIN = 2, FUN = as.numeric)
c(4:10, "capital")
country_data[,c(4:10, 12)] <- apply(apply(country_data[,c(4:10, 12)], MARGIN = 2, FUN = as.character), MARGIN = 2, FUN = as.numeric)
country_data <- country_data %>% left_join(province_data[, c("PID", "hre")], by = c("capital" = "PID"))
country_data <- country_data %>% inner_join(tags, by = "Tag")
country_data <- country_data %>% inner_join(tags, by = c("name" = "Tag"))
runApp()
game_data <- save_processing(save)
save <- readLines(con = "C:/Users/Canadice/Documents/Paradox Interactive/Europa Universalis IV/save games/MP_RotR_latest.eu4", encoding = "ANSI", warn = FALSE)
game_data <- save_processing(save)
save(game_data, file = "latest_rotr.RData")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
require(shinycssloader, quietly = TRUE)
require(shinycssloaders, quietly = TRUE)
require(shinycssloaders, quietly = TRUE)
install.packages()
install.packages("shinycssloaders")
require(shinycssloaders, quietly = TRUE)
runApp()
selectInput(inputId = "continent_choice",
label = "Select continent(s) where nations are to be selected:",
choices = c("Europe", "Asia", "Africa", "America"),
selected = current_selection_con,
multiple = TRUE,
selectize = TRUE,
width = NULL,
size = NULL
)
current_selection_con = NULL
selectInput(inputId = "continent_choice",
label = "Select continent(s) where nations are to be selected:",
choices = c("Europe", "Asia", "Africa", "America"),
selected = current_selection_con,
multiple = TRUE,
selectize = TRUE,
width = NULL,
size = NULL
)
runApp()
runApp()
runApp()
runApp()
load("latest_rotr.RData")
save <- readLines(con = "C:/Users/Canadice/Documents/Paradox Interactive/Europa Universalis IV/save games/MP_RotR_latest.eu4", encoding = "ANSI", warn = FALSE)
source("data_compiler.R")
tags <- read.csv2("tags.csv")
start_country <- which(str_detect(save, pattern = "^countries=\\{"))
country_data <- save[start_country:length(save)]
starts <- which(str_detect(country_data, pattern = "^\t[A-Z]{3}=\\{"))
ends <- c((starts-1)[-1], length(country_data))
indices <- do.call(list, mapply(seq, starts, ends))
country_data_split <- lapply(indices, FUN = function(x){country_data[x]})
starts_provinces <- which(str_detect(save, pattern = "^-[0-9]+=\\{"))
ends_provinces <- c((starts_provinces-1)[-1], start_country-1)
indices <- do.call(list, mapply(seq, starts_provinces, ends_provinces))
province_data_split <- lapply(indices, FUN = function(x){save[x]})
rm(list = c("ends", "starts", "starts_provinces", "ends_provinces", "start_country", "indices", "save"))
cl <- makeCluster(getOption("cl.cores", 4))
clusterExport(cl, varlist = c("information_finder", "province_information_scraper"))
data <- parLapply(cl = cl, X = province_data_split, fun = province_information_compiler)
stopCluster(cl)
province_data <- data %>%
Reduce(function(dtf1,dtf2) suppressWarnings(bind_rows(dtf1,dtf2)), .)
order(colnames(x = province_data))
province_data[,order(colnames(x = province_data))]
province_data <- province_data[,order(colnames(x = province_data))]
View(province_data)
colnames(x = province_data)
fort <- str_detect(colnames(x = province_data), pattern = "^fort_")
fort
buildings <- which(colnames(province_data) %in% c("marketplace", "workshop", "temple", "barracks", "shipyard", "fort_15th",
"courthouse", "dock", "regimental_camp", "fort_16th",
"cathedral", "university", "trade_depot", "grand_shipyard", "training_fields", "fort_17th",
"stock_exchange", "counting_house", "town_hall", "drydock", "conscription_center", "fort_18th",
"wharf", "weapons", "textile", "plantations", "tradecompany")
)
buildings
province_data <- province_data[,c(buldings, fort, cores, claims)]
province_data[,c(buildings, fort, cores, claims)]
# Finds the column index for sorting
buildings <- which(colnames(province_data) %in% c("marketplace", "workshop", "temple", "barracks", "shipyard", "fort_15th",
"courthouse", "dock", "regimental_camp", "fort_16th",
"cathedral", "university", "trade_depot", "grand_shipyard", "training_fields", "fort_17th",
"stock_exchange", "counting_house", "town_hall", "drydock", "conscription_center", "fort_18th",
"wharf", "weapons", "textile", "plantations", "tradecompany")
)
fort <- which(str_detect(colnames(x = province_data), pattern = "^fort_"))
cores <- which(str_detect(colnames(x = province_data), pattern = "^core"))
claims <- which(str_detect(colnames(x = province_data), pattern = "^claim"))
province_data[,c(buildings, fort, cores, claims)]
fort <- which(str_detect(colnames(x = province_data), pattern = "^fort_inf"))
province_data[,c(buildings, fort, cores, claims)]
colnames(province_data)
province_data <- data %>%
Reduce(function(dtf1,dtf2) suppressWarnings(bind_rows(dtf1,dtf2)), .)
province_data[,c(1, 3, base, buildings, fort, cores, claims)]
province_data <- province_data[,c(ordering_index, (1:ncol(province_data))[ordering_index])]
PID <- which(str_detect(colnames(x = province_data), pattern = "^PID"))
name <- which(str_detect(colnames(x = province_data), pattern = "^name"))
ordering_index <- c(PID, name, base, buildings, fort, cores, claims)
base <- which(str_detect(colnames(x = province_data), pattern = "^base"))
PID <- which(str_detect(colnames(x = province_data), pattern = "^PID"))
name <- which(str_detect(colnames(x = province_data), pattern = "^name"))
ordering_index <- c(PID, name, base, buildings, fort, cores, claims)
province_data <- province_data[,c(ordering_index, (1:ncol(province_data))[ordering_index])]
buildings <- which(colnames(province_data) %in% c("marketplace", "workshop", "temple", "barracks", "shipyard", "fort_15th",
"courthouse", "dock", "regimental_camp", "fort_16th",
"cathedral", "university", "trade_depot", "grand_shipyard", "training_fields", "fort_17th",
"stock_exchange", "counting_house", "town_hall", "drydock", "conscription_center", "fort_18th",
"wharf", "weapons", "textile", "plantations", "tradecompany")
)
fort <- which(str_detect(colnames(x = province_data), pattern = "^fort_inf"))
cores <- which(str_detect(colnames(x = province_data), pattern = "^core"))
claims <- which(str_detect(colnames(x = province_data), pattern = "^claim"))
base <- which(str_detect(colnames(x = province_data), pattern = "^base"))
PID <- which(str_detect(colnames(x = province_data), pattern = "^PID"))
name <- which(str_detect(colnames(x = province_data), pattern = "^name"))
ordering_index <- c(PID, name, base, buildings, fort, cores, claims)
(1:ncol(province_data))[-ordering_index]
province_data <- province_data[,c(ordering_index, (1:ncol(province_data))[-ordering_index])]
c(ordering_index, (1:ncol(province_data))[-ordering_index])
province_data <- data %>%
Reduce(function(dtf1,dtf2) suppressWarnings(bind_rows(dtf1,dtf2)), .)
buildings <- which(colnames(province_data) %in% c("marketplace", "workshop", "temple", "barracks", "shipyard", "fort_15th",
"courthouse", "dock", "regimental_camp", "fort_16th",
"cathedral", "university", "trade_depot", "grand_shipyard", "training_fields", "fort_17th",
"stock_exchange", "counting_house", "town_hall", "drydock", "conscription_center", "fort_18th",
"wharf", "weapons", "textile", "plantations", "tradecompany")
)
fort <- which(str_detect(colnames(x = province_data), pattern = "^fort_inf"))
cores <- which(str_detect(colnames(x = province_data), pattern = "^core"))
claims <- which(str_detect(colnames(x = province_data), pattern = "^claim"))
base <- which(str_detect(colnames(x = province_data), pattern = "^base"))
PID <- which(str_detect(colnames(x = province_data), pattern = "^PID"))
name <- which(str_detect(colnames(x = province_data), pattern = "^name"))
ordering_index <- c(PID, name, base, buildings, fort, cores, claims)
ordering_index
c(ordering_index, (1:ncol(province_data))[-ordering_index])
1:92 %in% c(ordering_index, (1:ncol(province_data))[-ordering_index])
province_data <- province_data[,c(ordering_index, (1:ncol(province_data))[-ordering_index])]
buildings <- which(colnames(province_data) %in% c("marketplace", "workshop", "temple", "barracks", "shipyard", "fort_15th",
"courthouse", "dock", "regimental_camp", "fort_16th",
"cathedral", "university", "trade_depot", "grand_shipyard", "training_fields", "fort_17th",
"stock_exchange", "counting_house", "town_hall", "drydock", "conscription_center", "fort_18th",
"wharf", "weapons", "textile", "plantations", "tradecompany")
)
fort <- which(str_detect(colnames(x = province_data), pattern = "^fort_inf"))
cores <- which(str_detect(colnames(x = province_data), pattern = "^core"))
claims <- which(str_detect(colnames(x = province_data), pattern = "^claim"))
base <- which(str_detect(colnames(x = province_data), pattern = "^base"))
PID <- which(str_detect(colnames(x = province_data), pattern = "^PID"))
originals <- which(str_detect(colnames(x = province_data), pattern = "^original"))
info <- which(colnames(province_data) %in% c("name", "culture", "religion", "capital", "trade_goods", "trade_power",
"trade", "local_autonomy", "hre", "owner")
ordering_index <- c(PID, info, base, buildings, fort, cores, claims, originals)
ordering_index <- c(PID, info, base, buildings, fort, cores, claims, originals)
info <- which(colnames(province_data) %in% c("name", "culture", "religion", "capital", "trade_goods", "trade_power",
"trade", "local_autonomy", "hre", "owner")
ordering_index <- c(PID, info, base, buildings, fort, cores, claims, originals)
province_data <- province_data[,c(ordering_index, (1:ncol(province_data))[-ordering_index])]
# Compiles the country data to a list
data <- lapply(country_data_split, FUN = country_information_compiler)
# Takes all information in the list and concatenate into a data frame
country_data <- data.frame(matrix(unlist(data), ncol=ncol(data[[1]]), byrow=TRUE, dimnames = list(NULL, colnames(data[[1]]))))
# Converts the numerical country data to numeric
country_data[,c(4:10, 12)] <- apply(apply(country_data[,c(4:10, 12)], MARGIN = 2, FUN = as.character), MARGIN = 2, FUN = as.numeric)
# Merges with the province data for each of the countries' capitals
country_data <- country_data %>% left_join(province_data[, c("PID", "hre")], by = c("capital" = "PID"))
# Merges with the country name data from tags
country_data <- country_data %>% inner_join(tags, by = c("name" = "Tag"))
# Returns a data set with all countries that have a continent value (NA usually indicate that they do not exist at the time of the save)
return(country_data[which(!is.na(country_data$continent)), ])
}
buildings <- which(colnames(province_data) %in% c("marketplace", "workshop", "temple", "barracks", "shipyard", "fort_15th",
"courthouse", "dock", "regimental_camp", "fort_16th",
"cathedral", "university", "trade_depot", "grand_shipyard", "training_fields", "fort_17th",
"stock_exchange", "counting_house", "town_hall", "drydock", "conscription_center", "fort_18th",
"wharf", "weapons", "textile", "plantations", "tradecompany")
)
fort <- which(str_detect(colnames(x = province_data), pattern = "^fort_inf"))
cores <- which(str_detect(colnames(x = province_data), pattern = "^core"))
claims <- which(str_detect(colnames(x = province_data), pattern = "^claim"))
base <- which(str_detect(colnames(x = province_data), pattern = "^base"))
PID <- which(str_detect(colnames(x = province_data), pattern = "^PID"))
originals <- which(str_detect(colnames(x = province_data), pattern = "^original"))
info <- which(colnames(province_data) %in% c("name", "culture", "religion", "capital", "trade_goods", "trade_power",
"trade", "local_autonomy", "hre", "owner"))
ordering_index <- c(PID, info, base, buildings, fort, cores, claims, originals)
province_data <- province_data[,c(ordering_index, (1:ncol(province_data))[-ordering_index])]
# Takes all information in the list and concatenate into a data frame
province_data <- data %>%
Reduce(function(dtf1,dtf2) suppressWarnings(bind_rows(dtf1,dtf2)), .)
# Finds the column index for sorting
buildings <- which(colnames(province_data) %in% c("marketplace", "workshop", "temple", "barracks", "shipyard", "fort_15th",
"courthouse", "dock", "regimental_camp", "fort_16th",
"cathedral", "university", "trade_depot", "grand_shipyard", "training_fields", "fort_17th",
"stock_exchange", "counting_house", "town_hall", "drydock", "conscription_center", "fort_18th",
"wharf", "weapons", "textile", "plantations", "tradecompany")
)
fort <- which(str_detect(colnames(x = province_data), pattern = "^fort_inf"))
cores <- which(str_detect(colnames(x = province_data), pattern = "^core"))
claims <- which(str_detect(colnames(x = province_data), pattern = "^claim"))
base <- which(str_detect(colnames(x = province_data), pattern = "^base"))
PID <- which(str_detect(colnames(x = province_data), pattern = "^PID"))
originals <- which(str_detect(colnames(x = province_data), pattern = "^original"))
info <- which(colnames(province_data) %in% c("name", "culture", "religion", "capital", "trade_goods", "trade_power",
"trade", "local_autonomy", "hre", "owner"))
ordering_index <- c(PID, info, base, buildings, fort, cores, claims, originals)
province_data <- province_data[,c(ordering_index, (1:ncol(province_data))[-ordering_index])]
province_data <- data %>%
Reduce(function(dtf1,dtf2) suppressWarnings(bind_rows(dtf1,dtf2)), .)
# Compiles the province data to a list, parallel processing to speed the list up
cl <- makeCluster(getOption("cl.cores", 4))
clusterExport(cl, varlist = c("information_finder", "province_information_scraper"))
data <- parLapply(cl = cl, X = province_data_split, fun = province_information_compiler)
stopCluster(cl)
# Takes all information in the list and concatenate into a data frame
province_data <- data %>%
Reduce(function(dtf1,dtf2) suppressWarnings(bind_rows(dtf1,dtf2)), .)
# Finds the column index for sorting
buildings <- which(colnames(province_data) %in% c("marketplace", "workshop", "temple", "barracks", "shipyard", "fort_15th",
"courthouse", "dock", "regimental_camp", "fort_16th",
"cathedral", "university", "trade_depot", "grand_shipyard", "training_fields", "fort_17th",
"stock_exchange", "counting_house", "town_hall", "drydock", "conscription_center", "fort_18th",
"wharf", "weapons", "textile", "plantations", "tradecompany")
)
fort <- which(str_detect(colnames(x = province_data), pattern = "^fort_inf"))
cores <- which(str_detect(colnames(x = province_data), pattern = "^core"))
claims <- which(str_detect(colnames(x = province_data), pattern = "^claim"))
base <- which(str_detect(colnames(x = province_data), pattern = "^base"))
PID <- which(str_detect(colnames(x = province_data), pattern = "^PID"))
originals <- which(str_detect(colnames(x = province_data), pattern = "^original"))
info <- which(colnames(province_data) %in% c("name", "culture", "religion", "capital", "trade_goods", "trade_power",
"trade", "local_autonomy", "hre", "owner"))
ordering_index <- c(PID, info, base, buildings, fort, cores, claims, originals)
province_data <- province_data[,c(ordering_index, (1:ncol(province_data))[-ordering_index])]
c(PID, info, base, buildings, fort, cores, claims, originals)
info <- which(c("name", "culture", "religion", "capital", "trade_goods", "trade_power", "trade", "local_autonomy", "hre", "owner") %in%
colnames(province_data))
# Finds the column index for sorting
buildings <- which(colnames(province_data) %in% c("marketplace", "workshop", "temple", "barracks", "shipyard", "fort_15th",
"courthouse", "dock", "regimental_camp", "fort_16th",
"cathedral", "university", "trade_depot", "grand_shipyard", "training_fields", "fort_17th",
"stock_exchange", "counting_house", "town_hall", "drydock", "conscription_center", "fort_18th",
"wharf", "weapons", "textile", "plantations", "tradecompany")
)
fort <- which(str_detect(colnames(x = province_data), pattern = "^fort_inf"))
cores <- which(str_detect(colnames(x = province_data), pattern = "^core"))
claims <- which(str_detect(colnames(x = province_data), pattern = "^claim"))
base <- which(str_detect(colnames(x = province_data), pattern = "^base"))
PID <- which(str_detect(colnames(x = province_data), pattern = "^PID"))
originals <- which(str_detect(colnames(x = province_data), pattern = "^original"))
info <- which(c("name", "culture", "religion", "capital", "trade_goods", "trade_power", "trade", "local_autonomy", "hre", "owner") %in%
colnames(province_data))
ordering_index <- c(PID, info, base, buildings, fort, cores, claims, originals)
province_data <- province_data[,c(ordering_index, (1:ncol(province_data))[-ordering_index])]
province_data <- data %>%
Reduce(function(dtf1,dtf2) suppressWarnings(bind_rows(dtf1,dtf2)), .)
# Finds the column index for sorting
buildings <- which(colnames(province_data) %in% c("marketplace", "workshop", "temple", "barracks", "shipyard", "fort_15th",
"courthouse", "dock", "regimental_camp", "fort_16th",
"cathedral", "university", "trade_depot", "grand_shipyard", "training_fields", "fort_17th",
"stock_exchange", "counting_house", "town_hall", "drydock", "conscription_center", "fort_18th",
"wharf", "weapons", "textile", "plantations", "tradecompany")
)
fort <- which(str_detect(colnames(x = province_data), pattern = "^fort_inf"))
cores <- which(str_detect(colnames(x = province_data), pattern = "^core"))
claims <- which(str_detect(colnames(x = province_data), pattern = "^claim"))
base <- which(str_detect(colnames(x = province_data), pattern = "^base"))
PID <- which(str_detect(colnames(x = province_data), pattern = "^PID"))
originals <- which(str_detect(colnames(x = province_data), pattern = "^original"))
info <- which(c("name", "culture", "religion", "capital", "trade_goods", "trade_power", "trade", "local_autonomy", "hre", "owner") %in%
colnames(province_data))
ordering_index <- c(PID, info, base, buildings, fort, cores, claims, originals)
province_data <- province_data[,c(ordering_index, (1:ncol(province_data))[-ordering_index])]
ordering_index
info
# Finds the column index for sorting
buildings <- which(colnames(province_data) %in% c("marketplace", "workshop", "temple", "barracks", "shipyard", "fort_15th",
"courthouse", "dock", "regimental_camp", "fort_16th",
"cathedral", "university", "trade_depot", "grand_shipyard", "training_fields", "fort_17th",
"stock_exchange", "counting_house", "town_hall", "drydock", "conscription_center", "fort_18th",
"wharf", "weapons", "textile", "plantations", "tradecompany")
)
fort <- which(str_detect(colnames(x = province_data), pattern = "^fort_inf"))
cores <- which(str_detect(colnames(x = province_data), pattern = "^core"))
claims <- which(str_detect(colnames(x = province_data), pattern = "^claim"))
base <- which(str_detect(colnames(x = province_data), pattern = "^base"))
PID <- which(str_detect(colnames(x = province_data), pattern = "^PID"))
originals <- which(str_detect(colnames(x = province_data), pattern = "^original"))
info <- which(colnames(province_data) %in% c("name", "culture", "religion", "capital", "trade_goods", "trade_power",
"trade", "local_autonomy", "hre", "owner")
)
ordering_index <- c(PID, info, base, buildings, fort, cores, claims, originals)
province_data <- province_data[,c(ordering_index, (1:ncol(province_data))[-ordering_index])]
province_data <- data %>%
Reduce(function(dtf1,dtf2) suppressWarnings(bind_rows(dtf1,dtf2)), .)
# Finds the column index for sorting
buildings <- which(colnames(province_data) %in% c("marketplace", "workshop", "temple", "barracks", "shipyard", "fort_15th",
"courthouse", "dock", "regimental_camp", "fort_16th",
"cathedral", "university", "trade_depot", "grand_shipyard", "training_fields", "fort_17th",
"stock_exchange", "counting_house", "town_hall", "drydock", "conscription_center", "fort_18th",
"wharf", "weapons", "textile", "plantations", "tradecompany")
)
fort <- which(str_detect(colnames(x = province_data), pattern = "^fort_inf"))
cores <- which(str_detect(colnames(x = province_data), pattern = "^core"))
claims <- which(str_detect(colnames(x = province_data), pattern = "^claim"))
base <- which(str_detect(colnames(x = province_data), pattern = "^base"))
PID <- which(str_detect(colnames(x = province_data), pattern = "^PID"))
originals <- which(str_detect(colnames(x = province_data), pattern = "^original"))
info <- which(colnames(province_data) %in% c("name", "culture", "religion", "capital", "trade_goods", "trade_power",
"trade", "local_autonomy", "hre", "owner")
)
ordering_index <- c(PID, info, base, buildings, fort, cores, claims, originals)
province_data <- province_data[,c(ordering_index, (1:ncol(province_data))[-ordering_index])]
province_data <- province_data[,order(colnames(province_data))]
# Takes all information in the list and concatenate into a data frame
country_data <- data.frame(matrix(unlist(data), ncol=ncol(data[[1]]), byrow=TRUE, dimnames = list(NULL, colnames(data[[1]]))))
# Converts the numerical country data to numeric
country_data[,c(4:10, 12)] <- apply(apply(country_data[,c(4:10, 12)], MARGIN = 2, FUN = as.character), MARGIN = 2, FUN = as.numeric)
# Merges with the province data for each of the countries' capitals
country_data <- country_data %>% left_join(province_data[, c("PID", "hre")], by = c("capital" = "PID"))
# Merges with the country name data from tags
country_data <- country_data %>% inner_join(tags, by = c("name" = "Tag"))
resulting_data <- list(province_data, country_data[which(!is.na(country_data$continent)),])
# Takes all information in the list and concatenate into a data frame
province_data <- data %>%
Reduce(function(dtf1,dtf2) suppressWarnings(bind_rows(dtf1,dtf2)), .)
# Takes all information in the list and concatenate into a data frame
country_data <- data.frame(matrix(unlist(data), ncol=ncol(data[[1]]), byrow=TRUE, dimnames = list(NULL, colnames(data[[1]]))))
# Converts the numerical country data to numeric
country_data[,c(4:10, 12)] <- apply(apply(country_data[,c(4:10, 12)], MARGIN = 2, FUN = as.character), MARGIN = 2, FUN = as.numeric)
# Compiles the province data to a list, parallel processing to speed the list up
cl <- makeCluster(getOption("cl.cores", 4))
clusterExport(cl, varlist = c("information_finder", "province_information_scraper"))
data <- parLapply(cl = cl, X = province_data_split, fun = province_information_compiler)
stopCluster(cl)
# Compiles the country data to a list
data <- lapply(country_data_split, FUN = country_information_compiler)
# Takes all information in the list and concatenate into a data frame
country_data <- data.frame(matrix(unlist(data), ncol=ncol(data[[1]]), byrow=TRUE, dimnames = list(NULL, colnames(data[[1]]))))
country_data[,c(4:10, 12)] <- apply(apply(country_data[,c(4:10, 12)], MARGIN = 2, FUN = as.character), MARGIN = 2, FUN = as.numeric)
country_data <- country_data %>% left_join(province_data[, c("PID", "hre")], by = c("capital" = "PID"))
country_data <- country_data %>% inner_join(tags, by = c("name" = "Tag"))
resulting_data <- list(province_data, country_data[which(!is.na(country_data$continent)),])
resulting_data <- list(province = province_data, country = country_data[which(!is.na(country_data$continent)),])
runApp()
save <- readLines(con = "C:/Users/Canadice/Documents/Paradox Interactive/Europa Universalis IV/save games/MP_RotR_latest.eu4", encoding = "ANSI", warn = FALSE)
game_data <- save_processing(save)
save(game_data, file = "latest_rotr.RData")
runApp()
runApp()
save <- readLines(con = "C:/Users/Canadice/Documents/Paradox Interactive/Europa Universalis IV/save games/MP_RotR_latest.eu4", encoding = "ANSI", warn = FALSE)
game_data <- save_processing(save)
save(game_data, file = "latest_rotr.RData")
runApp()
runApp()
runApp()
runApp()
runApp()
