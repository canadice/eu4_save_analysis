### Time-series data
############################
ts_compiler <- function(ts){
ts_list <- lapply(ts, FUN = data_compiler)
ts_list <- lapply(ts_list, FUN = function(x){
if(length(x) == 3){
NULL
} else {
tag <- str_extract(unlist(x), pattern = "[A-Z]+")
data <- x[[4]][2]
data <- str_split(data, pattern = "[ =]")
data <- lapply(data, FUN = function(x){
data <- matrix(unlist(x[-length(x)]), nrow = 2)
data_frame <- data.frame(data, stringsAsFactors = FALSE)[-1,]
names(data_frame) <- data[1,]
data_frame
})
data <- as.data.frame(t(unlist(data)), stringsAsFactors = FALSE)
data$tag <- tag[!is.na(tag)]
data
}
})
ts_list <- ts_list[!unlist(lapply(ts_list, FUN = is.null))]
variables <- unlist(lapply(ts_list, colnames))
data_frame <- as.data.frame(matrix("", ncol = length(unique(variables))), stringsAsFactors = FALSE)
colnames(data_frame) <- unique(variables)
for(i in 1:length(ts_list)){
x <- ts_list[[i]]
index <- which(colnames(data_frame) %in% colnames(x))
temp <- data_frame[1,]
temp[, index] <- x[, colnames(data_frame)[index]]
data_frame <- rbind(data_frame, temp)
if(i == length(ts_list)){
data_frame <- data_frame[-1,]
}
}
num_indices <- apply(data_frame,
MARGIN = 2,
FUN = function(x){
!any(str_detect(x, pattern = "[a-zA-Z]"))
})
data_frame[,num_indices] <- suppressWarnings(sapply(data_frame[, num_indices], FUN = as.numeric))
data_frame <- gather(data_frame, "year", "value", -"tag")
data_frame$year <- as.numeric(data_frame$year)
return(data_frame)
}
############################
### Save scraper
############################
save_processing <- function(save){
# Imports a list of tags and responding names of nation
tags <- read.csv2("tags.csv", stringsAsFactors = FALSE)
##########################################################################
### Subsetting
##########################################################################
structure <- data_structurer(save)
rm(save)
##########################################################################
### Provinces
##########################################################################
provinces <- province_compiler(structure$provinces)
##########################################################################
### Countries
##########################################################################
countries <- country_compiler(structure$countries)
# Merges with the province data for each of the countries' capitals
countries <- countries %>%
left_join(provinces[, c("ID", "hre")], by = c("capital" = "ID"))
# Merges with the country names from the tags
if(any(str_detect(structure$mod_enabled, pattern = "Voltaire"))){
countries <- countries %>%
inner_join(tags[tags$Region == "Voltaire",], by = c("tag" = "Tag"))
} else {
countries <- countries %>%
inner_join(tags[tags$Region != "Voltaire",], by = c("tag" = "Tag"))
}
##########################################################################
### Meta-data
##########################################################################
meta_list <- structure[c("date",
"save_game",
"current_age",
"start_date",
"savegame_versions",
"multi_player")]
meta_list$savegame_versions <- str_extract(meta_list$savegame_versions,
"[0-9]{1}.[0-9]{2}.[0-9]{1}.[0-9]{1}")[!is.na(str_extract(meta_list$savegame_versions,
"[0-9]{1}.[0-9]{2}.[0-9]{1}.[0-9]{1}"))]
meta_list <- str_split(meta_list, pattern = "=")
meta_list <- lapply(meta_list, FUN = function(x){
data <- matrix(unlist(x), nrow = 2)
data_frame <- data.frame(data, stringsAsFactors = FALSE)[-1,]
names(data_frame) <- data[1,]
data_frame
})
meta_data <- unlist(meta_list)
names(meta_data)[5] <- "name"
meta_data <- as.data.frame(t(meta_data))
##########################################################################
### Time-series data
##########################################################################
ts_lists <- list(income = structure$income_statistics,
nation_size = structure$nation_size_statistics,
score = structure$score_statistics,
inflation = structure$inflation_statistics)
ts_lists <- lapply(ts_lists, ts_compiler)
##########################################################################
### Aggregating to end
##########################################################################
resulting_data <- list(meta = meta_data, province = provinces,
country = countries, time_series = ts_lists)
return(resulting_data)
}
if(length(append) > 0){
for(i in append){
save <- c(save[1:(append-1)],
str_replace(save[append, pattern = "\\{\\{", replacement = "\\{"),
"{",
save[(append+1):length(save)])
}
}
append <- which(str_detect(save, pattern = "\\{\\{"))
if(length(append) > 0){
for(i in append){
save <- c(save[1:(append-1)],
str_replace(save[append], pattern = "\\{\\{", replacement = "\\{"),
"{",
save[(append+1):length(save)])
}
}
##
save <- readLines(con = "C:/Users/Canadice/Documents/Paradox Interactive/Europa Universalis IV/save games/Summerburst Session 3.eu4", encoding = "ANSI", warn = FALSE)
save <- str_replace_all(save, pattern = "[\t\"]", replacement = "")
# Checks for lines with two starting braces
append <- which(str_detect(save, pattern = "\\{\\{"))
if(length(append) > 0){
for(i in 1:length(append)){
save <- c(save[1:(append[i]-1)],
str_replace(save[append[i]], pattern = "\\{\\{", replacement = "\\{"),
"{",
save[(append[i]+1):length(save)])
}
}
# Sourcing the scraper and compiler scripts
# source("save_scraper.R")
source("functions.R")
game_data <- save_processing(save)
##
save <- readLines(con = "C:/Users/Canadice/Documents/Paradox Interactive/Europa Universalis IV/save games/Summerburst Session 3.eu4", encoding = "ANSI", warn = FALSE)
tags <- read.csv2("tags.csv", stringsAsFactors = FALSE)
##########################################################################
### Subsetting
##########################################################################
structure <- data_structurer(save)
# Sourcing the scraper and compiler scripts
# source("save_scraper.R")
source("functions.R")
# Imports a list of tags and responding names of nation
tags <- read.csv2("tags.csv", stringsAsFactors = FALSE)
##########################################################################
### Subsetting
##########################################################################
structure <- data_structurer(save)
##########################################################################
### Provinces
##########################################################################
provinces <- province_compiler(structure$provinces)
##########################################################################
### Countries
##########################################################################
countries <- country_compiler(structure$countries)
# Merges with the province data for each of the countries' capitals
countries <- countries %>%
left_join(provinces[, c("ID", "hre")], by = c("capital" = "ID"))
# Merges with the country names from the tags
if(any(str_detect(structure$mod_enabled, pattern = "Voltaire"))){
countries <- countries %>%
inner_join(tags[tags$Region == "Voltaire",], by = c("tag" = "Tag"))
} else {
countries <- countries %>%
inner_join(tags[tags$Region != "Voltaire",], by = c("tag" = "Tag"))
}
##########################################################################
### Meta-data
##########################################################################
meta_list <- structure[c("date",
"save_game",
"current_age",
"start_date",
"savegame_versions",
"multi_player")]
meta_list$savegame_versions <- str_extract(meta_list$savegame_versions,
"[0-9]{1}.[0-9]{2}.[0-9]{1}.[0-9]{1}")[!is.na(str_extract(meta_list$savegame_versions,
"[0-9]{1}.[0-9]{2}.[0-9]{1}.[0-9]{1}"))]
meta_list <- str_split(meta_list, pattern = "=")
meta_list <- lapply(meta_list, FUN = function(x){
data <- matrix(unlist(x), nrow = 2)
data_frame <- data.frame(data, stringsAsFactors = FALSE)[-1,]
names(data_frame) <- data[1,]
data_frame
})
meta_data <- unlist(meta_list)
names(meta_data)[5] <- "name"
meta_data <- as.data.frame(t(meta_data))
##########################################################################
### Time-series data
##########################################################################
ts_lists <- list(income = structure$income_statistics,
nation_size = structure$nation_size_statistics,
score = structure$score_statistics,
inflation = structure$inflation_statistics)
ts_lists <- lapply(ts_lists, ts_compiler)
##########################################################################
### Aggregating to end
##########################################################################
resulting_data <- list(meta = meta_data, province = provinces,
country = countries, time_series = ts_lists)
game_data <- save_processing(save)
save(game_data, file = "latest.RData")
game_data$province
runApp()
## Setting the WD to the local directory of the Git.
setwd("F:/GitHubs/eu4_save_analysis")
# Sourcing the scraper and compiler scripts
# source("save_scraper.R")
source("functions.R")
# source("data_compiler.R")
## Loading the required packages
require(shiny, quietly = TRUE)
require(shinythemes, quietly = TRUE)
require(stringr, quietly = TRUE)
require(ggplot2, quietly = TRUE)
require(dplyr, quietly = TRUE)
require(tidyr, quietly = TRUE)
require(stringr, quietly = TRUE)
require(parallel, quietly = TRUE)
require(shinycssloaders, quietly = TRUE)
require(DT, quietly = TRUE)
##
save <- readLines(con = "C:/Users/Canadice/Documents/Paradox Interactive/Europa Universalis IV/save games/Summerburst Session 4.eu4", encoding = "ANSI", warn = FALSE)
game_data <- save_processing(save)
save(game_data, file = "latest.RData")
## Setting the WD to the local directory of the Git.
setwd("F:/GitHubs/eu4_save_analysis")
# Sourcing the scraper and compiler scripts
# source("save_scraper.R")
source("functions.R")
# source("data_compiler.R")
## Loading the required packages
require(shiny, quietly = TRUE)
require(shinythemes, quietly = TRUE)
require(stringr, quietly = TRUE)
require(ggplot2, quietly = TRUE)
require(dplyr, quietly = TRUE)
require(tidyr, quietly = TRUE)
require(stringr, quietly = TRUE)
require(parallel, quietly = TRUE)
require(shinycssloaders, quietly = TRUE)
require(DT, quietly = TRUE)
##
save <- readLines(con = "C:/Users/Canadice/Documents/Paradox Interactive/Europa Universalis IV/save games/autosave.eu4", encoding = "ANSI", warn = FALSE)
game_data <- save_processing(save)
setwd("F:/GitHubs/eu4_save_analysis")
# Sourcing the scraper and compiler scripts
# source("save_scraper.R")
source("functions.R")
# source("data_compiler.R")
## Loading the required packages
require(shiny, quietly = TRUE)
require(shinythemes, quietly = TRUE)
require(stringr, quietly = TRUE)
require(ggplot2, quietly = TRUE)
require(dplyr, quietly = TRUE)
require(tidyr, quietly = TRUE)
require(stringr, quietly = TRUE)
require(parallel, quietly = TRUE)
require(shinycssloaders, quietly = TRUE)
require(DT, quietly = TRUE)
##
save <- readLines(con = "C:/Users/Canadice/Documents/Paradox Interactive/Europa Universalis IV/save games/Summerburst Session 5.eu4", encoding = "ANSI", warn = FALSE)
game_data <- save_processing(save)
save(game_data, file = "latest.RData")
source('F:/GitHubs/eu4_save_analysis/raw files/updater.R', echo=TRUE)
game_data$country[which(game_data$country$was_player == "yes"),
c("Name",
"tag",
"score_place",
"prestige",
"capped_development",
"raw_development",
"treasury",
"estimated_monthly_income",
"base_tax",
"loan_size",
"estimated_loan",
"mercantilism",
"inflation",
"army_tradition",
"army_professionalism",
"max_historic_army_professionalism",
"total_war_worth",
"army_size",
"manpower",
"max_manpower",
"sailors",
"max_sailors",
"num_uncontested_cores",
"num_owned_home_cores",
"num_of_core_ports",
"num_of_total_ports",
"num_of_cities",
"num_of_cardinals",
"num_of_allies",
"num_of_royal_marriages",
"num_of_subjects",
"innovativeness",
"meritocracy",
"republican_tradition",
"average_unrest",
"average_autonomy",
"great_power_score",
"card_score",
"is_elector")]
game_data$province[game_data$province$controller %in% country$tag,
c("name",
"owner",
"controller",
"base_tax",
"base_production",
"base_manpower",
"trade_goods",
"trade_power",
"improve_count",
"center_of_trade",
"center_of_religion")]
game_data$province
colnames(game_data$province)
colnames(game_data$province) %in% c("name",
"owner",
"controller",
"base_tax",
"base_production",
"base_manpower",
"trade_goods",
"trade_power",
"improve_count",
"center_of_trade",
"center_of_religion")
game_data$province[game_data$province$controller %in% country$tag,
colnames(game_data$province) %in% c("name",
"owner",
"controller",
"base_tax",
"base_production",
"base_manpower",
"trade_goods",
"trade_power",
"improve_count",
"center_of_trade",
"center_of_religion")]
game_data$province[,
colnames(game_data$province) %in% c("name",
"owner",
"controller",
"base_tax",
"base_production",
"base_manpower",
"trade_goods",
"trade_power",
"improve_count",
"center_of_trade",
"center_of_religion")]
## Setting the WD to the local directory of the Git.
setwd("F:/GitHubs/eu4_save_analysis")
# Sourcing the scraper and compiler scripts
# source("save_scraper.R")
source("functions.R")
# source("data_compiler.R")
## Loading the required packages
require(shiny, quietly = TRUE)
require(shinythemes, quietly = TRUE)
require(stringr, quietly = TRUE)
require(ggplot2, quietly = TRUE)
require(dplyr, quietly = TRUE)
require(tidyr, quietly = TRUE)
require(stringr, quietly = TRUE)
require(parallel, quietly = TRUE)
require(shinycssloaders, quietly = TRUE)
require(DT, quietly = TRUE)
##
save <- readLines(con = "C:/Users/Canadice/Documents/Paradox Interactive/Europa Universalis IV/save games/Fallout Session 1.eu4",
encoding = "ANSI", warn = FALSE)
game_data <- save_processing(save)
save(game_data, file = "latest.RData")
## Setting the WD to the local directory of the Git.
setwd("F:/GitHubs/eu4_save_analysis")
# Sourcing the scraper and compiler scripts
# source("save_scraper.R")
source("functions.R")
## Loading the required packages
require(shiny, quietly = TRUE)
require(shinythemes, quietly = TRUE)
require(stringr, quietly = TRUE)
require(ggplot2, quietly = TRUE)
require(dplyr, quietly = TRUE)
require(tidyr, quietly = TRUE)
require(stringr, quietly = TRUE)
require(parallel, quietly = TRUE)
require(shinycssloaders, quietly = TRUE)
require(DT, quietly = TRUE)
##
save <- readLines(con = "C:/Users/Canadice/Documents/Paradox Interactive/Europa Universalis IV/save games/Fallout Session 5.eu4",
encoding = "ANSI", warn = FALSE)
game_data <- save_processing(save)
save(game_data, file = "latest.RData")
# Imports a list of tags and responding names of nation
tags <- read.csv2("tags.csv", stringsAsFactors = FALSE)
structure <- data_structurer(save)
##########################################################################
### Provinces
##########################################################################
provinces <- province_compiler(structure$provinces)
##########################################################################
### Countries
##########################################################################
countries <- country_compiler(structure$countries)
# Merges with the province data for each of the countries' capitals
countries <- countries %>%
left_join(provinces[, c("ID", "hre")], by = c("capital" = "ID"))
# Merges with the country names from the tags
if(any(str_detect(structure$mod_enabled, pattern = "Voltaire"))){
countries <- countries %>%
inner_join(tags[tags$Region == "Voltaire",], by = c("tag" = "Tag"))
} else {
countries <- countries %>%
inner_join(tags[tags$Region != "Voltaire",], by = c("tag" = "Tag"))
}
provinces
provinces[, c("ID", "hre")]
# Merges with the province data for each of the countries' capitals
countries <- countries %>%
left_join(provinces[, c("ID", "hre_liberated")], by = c("capital" = "ID"))
# Merges with the country names from the tags
if(any(str_detect(structure$mod_enabled, pattern = "Voltaire"))){
countries <- countries %>%
inner_join(tags[tags$Region == "Voltaire",], by = c("tag" = "Tag"))
} else {
countries <- countries %>%
inner_join(tags[tags$Region != "Voltaire",], by = c("tag" = "Tag"))
}
##########################################################################
### Meta-data
##########################################################################
meta_list <- structure[c("date",
"save_game",
"current_age",
"start_date",
"savegame_versions",
"multi_player")]
meta_list$savegame_versions <- str_extract(meta_list$savegame_versions,
"[0-9]{1}.[0-9]{2}.[0-9]{1}.[0-9]{1}")[!is.na(str_extract(meta_list$savegame_versions,
"[0-9]{1}.[0-9]{2}.[0-9]{1}.[0-9]{1}"))]
meta_list <- str_split(meta_list, pattern = "=")
meta_list <- lapply(meta_list, FUN = function(x){
data <- matrix(unlist(x), nrow = 2)
data_frame <- data.frame(data, stringsAsFactors = FALSE)[-1,]
names(data_frame) <- data[1,]
data_frame
})
meta_data <- unlist(meta_list)
names(meta_data)[5] <- "name"
meta_data <- as.data.frame(t(meta_data))
##########################################################################
### Time-series data
##########################################################################
ts_lists <- list(income = structure$income_statistics,
nation_size = structure$nation_size_statistics,
score = structure$score_statistics,
inflation = structure$inflation_statistics)
ts_lists <- lapply(ts_lists, ts_compiler)
##########################################################################
### Aggregating to end
##########################################################################
resulting_data <- list(meta = meta_data, province = provinces,
country = countries, time_series = ts_lists)
return(resulting_data)
source('F:/GitHubs/eu4_save_analysis/raw files/updater.R', echo=TRUE)
runApp()
## Setting the WD to the local directory of the Git.
setwd("F:/GitHubs/eu4_save_analysis")
# Sourcing the scraper and compiler scripts
# source("save_scraper.R")
source("functions.R")
# source("data_compiler.R")
## Loading the required packages
require(shiny, quietly = TRUE)
require(shinythemes, quietly = TRUE)
require(stringr, quietly = TRUE)
require(ggplot2, quietly = TRUE)
require(dplyr, quietly = TRUE)
require(tidyr, quietly = TRUE)
require(stringr, quietly = TRUE)
require(parallel, quietly = TRUE)
require(shinycssloaders, quietly = TRUE)
require(DT, quietly = TRUE)
##
save <- readLines(con = "C:/Users/Canadice/Documents/Paradox Interactive/Europa Universalis IV/save games/Fallout Session 6.eu4",
encoding = "ANSI", warn = FALSE)
game_data <- save_processing(save)
save(game_data, file = "latest.RData")
source('F:/GitHubs/eu4_save_analysis/raw files/updater.R', echo=TRUE)
source('F:/GitHubs/eu4_save_analysis/raw files/updater.R', echo=TRUE)
