return(data)
}
continent <- information_finder(x, "continent")
gov_rank <- information_finder(x, "government_rank")
development <- information_finder(x, "raw_development")
pattern = "raw_development"
which(str_detect(vector, pattern))
any(str_detect(vector, pattern))
information_finder <- function(vector, pattern){
if(pattern != "continent"){
if(!any(str_detect(vector, pattern))){
return(NA)
} else {
data <- vector[which(str_detect(vector, pattern))]
data <- unlist(str_split(data, pattern = "="))[2]
}
} else {
data <- vector[which(str_detect(vector, pattern))+1]
data <- str_trim(str_sub(data, start = 4), side = "right")
data <- str_extract(unlist(str_split(data, " ")), "[0-9]")
if(any(data == 1)){
data <- which(data == 1)
} else {
return(NA)
}
}
return(data)
}
name <- str_extract(x[1], "[A-Z]{3}")
continent <- information_finder(x, "continent")
gov_rank <- information_finder(x, "government_rank")
development <- information_finder(x, "raw_development")
great_power <- information_finder(x, "great_power_score")
cur_treasury <- information_finder(x, "treasury=")
est_month_income <- information_finder(x, "estimated_monthly_income")
mil_strength <- information_finder(x, "military_strength=")
manpower <- information_finder(x, "max_manpower=")
cur_army_size <- information_finder(x, "num_of_regulars")
data <- cbind(name, continent, gov_rank, development, great_power, cur_treasury, est_month_income, mil_strength, manpower, cur_army_size)
return(data)
matrix(unlist(lapply(country_data_split, FUN = information_compiler)), ncol=10, byrow=TRUE)
data.frame(matrix(unlist(lapply(country_data_split, FUN = information_compiler)), ncol=10, byrow=TRUE))
data <- data.frame(matrix(unlist(lapply(country_data_split, FUN = information_compiler)), ncol=10, byrow=TRUE))
information_compiler <- function(x){
name <- str_extract(x[1], "[A-Z]{3}")
continent <- information_finder(x, "continent")
gov_rank <- information_finder(x, "government_rank")
development <- as.numeric(information_finder(x, "raw_development"))
great_power <- as.numeric(information_finder(x, "great_power_score"))
cur_treasury <- as.numeric(information_finder(x, "treasury="))
est_month_income <- as.numeric(information_finder(x, "estimated_monthly_income"))
mil_strength <- as.numeric(information_finder(x, "military_strength="))
manpower <- as.numeric(information_finder(x, "max_manpower="))
cur_army_size <- as.numeric(information_finder(x, "num_of_regulars"))
data <- cbind(name, continent, gov_rank, development, great_power, cur_treasury, est_month_income, mil_strength, manpower, cur_army_size)
return(data)
}
data <- data.frame(matrix(unlist(lapply(country_data_split, FUN = information_compiler)), ncol=10, byrow=TRUE))
name <- str_extract(x[1], "[A-Z]{3}")
continent <- information_finder(x, "continent")
gov_rank <- information_finder(x, "government_rank")
development <- as.numeric(information_finder(x, "raw_development"))
gov_rank <- information_finder(x, "government_rank")
development <- as.numeric(information_finder(x, "raw_development"))
great_power <- as.numeric(information_finder(x, "great_power_score"))
cur_treasury <- as.numeric(information_finder(x, "treasury="))
great_power <- as.numeric(information_finder(x, "great_power_score"))
cur_treasury <- as.numeric(information_finder(x, "treasury="))
est_month_income <- as.numeric(information_finder(x, "estimated_monthly_income"))
mil_strength <- as.numeric(information_finder(x, "military_strength="))
manpower <- as.numeric(information_finder(x, "max_manpower="))
cur_army_size <- as.numeric(information_finder(x, "num_of_regulars"))
data <- cbind(name, continent, gov_rank, development, great_power, cur_treasury, est_month_income, mil_strength, manpower, cur_army_size)
data <- data.frame(name, continent, gov_rank, development, great_power, cur_treasury, est_month_income, mil_strength, manpower, cur_army_size)
information_compiler <- function(x){
name <- str_extract(x[1], "[A-Z]{3}")
continent <- information_finder(x, "continent")
gov_rank <- information_finder(x, "government_rank")
development <- as.numeric(information_finder(x, "raw_development"))
great_power <- as.numeric(information_finder(x, "great_power_score"))
cur_treasury <- as.numeric(information_finder(x, "treasury="))
est_month_income <- as.numeric(information_finder(x, "estimated_monthly_income"))
mil_strength <- as.numeric(information_finder(x, "military_strength="))
manpower <- as.numeric(information_finder(x, "max_manpower="))
cur_army_size <- as.numeric(information_finder(x, "num_of_regulars"))
data <- data.frame(name, continent, gov_rank, development, great_power, cur_treasury, est_month_income, mil_strength, manpower, cur_army_size)
return(data)
}
data <- data.frame(matrix(unlist(lapply(country_data_split, FUN = information_compiler)), ncol=10, byrow=TRUE))
View(data)
name <- str_extract(x[1], "[A-Z]{3}")
continent <- information_finder(x, "continent")
gov_rank <- information_finder(x, "government_rank")
development <- as.numeric(information_finder(x, "raw_development"))
great_power <- as.numeric(information_finder(x, "great_power_score"))
cur_treasury <- as.numeric(information_finder(x, "treasury="))
est_month_income <- as.numeric(information_finder(x, "estimated_monthly_income"))
mil_strength <- as.numeric(information_finder(x, "military_strength="))
manpower <- as.numeric(information_finder(x, "max_manpower="))
cur_army_size <- as.numeric(information_finder(x, "num_of_regulars"))
data <- data.frame(name, continent, gov_rank, development, great_power, cur_treasury, est_month_income, mil_strength, manpower, cur_army_size)
data <- data.frame(matrix(unlist(lapply(country_data_split, FUN = information_compiler)), ncol=10, byrow=TRUE))
information_compiler <- function(x){
name <- str_extract(x[1], "[A-Z]{3}")
continent <- information_finder(x, "continent")
gov_rank <- information_finder(x, "government_rank")
development <- information_finder(x, "raw_development")
great_power <- information_finder(x, "great_power_score")
cur_treasury <- information_finder(x, "treasury=")
est_month_income <- information_finder(x, "estimated_monthly_income")
mil_strength <- information_finder(x, "military_strength=")
manpower <- information_finder(x, "max_manpower=")
cur_army_size <- information_finder(x, "num_of_regulars")
data <- cbind(name, continent, gov_rank, development, great_power, cur_treasury, est_month_income, mil_strength, manpower, cur_army_size)
return(data)
}
data <- data.frame(matrix(unlist(lapply(country_data_split, FUN = information_compiler)), ncol=10, byrow=TRUE))
data[,4:10] <- as.character(data[,4:10])
data[,4:10] <- as.numeric(as.character(data[,4:10]))
data <- data.frame(matrix(unlist(lapply(country_data_split, FUN = information_compiler)), ncol=10, byrow=TRUE))
data[,4:10] <- apply(data[,4:10], MARGIN = 2, FUN = as.character)
data[,4:10] <- apply(apply(data[,4:10], MARGIN = 2, FUN = as.character), MARGIN = 2, FUN = as.numeric)
data <- data.frame(matrix(unlist(lapply(country_data_split, FUN = information_compiler)), ncol=10, byrow=TRUE))
View(data)
country_data_split[[165]]
vector = country_data_split[[165]]
x = vector
name <- str_extract(x[1], "[A-Z]{3}")
continent <- information_finder(x, "continent")
gov_rank <- information_finder(x, "government_rank")
information_finder <- function(vector, pattern){
if(pattern != "continent"){
if(!any(str_detect(vector, pattern))){
return(NA)
} else {
data <- vector[which(str_detect(vector, pattern))]
data <- unlist(str_split(data, pattern = "="))[2]
}
} else {
data <- vector[which(str_detect(vector, pattern))+1]
data <- str_trim(str_sub(data, start = 4), side = "right")
data <- str_extract(unlist(str_split(data, " ")), "[0-9]")
if(any(data == 1)){
data <- which(data == 1)[1]
} else {
return(NA)
}
}
return(data)
}
information_compiler <- function(x){
name <- str_extract(x[1], "[A-Z]{3}")
continent <- information_finder(x, "continent")
gov_rank <- information_finder(x, "government_rank")
development <- information_finder(x, "raw_development")
great_power <- information_finder(x, "great_power_score")
cur_treasury <- information_finder(x, "treasury=")
est_month_income <- information_finder(x, "estimated_monthly_income")
mil_strength <- information_finder(x, "military_strength=")
manpower <- information_finder(x, "max_manpower=")
cur_army_size <- information_finder(x, "num_of_regulars")
data <- cbind(name, continent, gov_rank, development, great_power, cur_treasury, est_month_income, mil_strength, manpower, cur_army_size)
return(data)
}
data <- data.frame(matrix(unlist(lapply(country_data_split, FUN = information_compiler)), ncol=10, byrow=TRUE))
data[,4:10] <- apply(apply(data[,4:10], MARGIN = 2, FUN = as.character), MARGIN = 2, FUN = as.numeric)
shiny::runApp('F:/Google Drive/Paradox Games/R-Functions/EU4_Force_Calculator')
runApp('F:/Google Drive/Paradox Games/R-Functions/EU4_Force_Calculator')
runApp('F:/Google Drive/Paradox Games/R-Functions/EU4_Force_Calculator')
source("save_scraper.R")
runApp('F:/Google Drive/Paradox Games/R-Functions/EU4_Force_Calculator')
runApp('F:/Google Drive/Paradox Games/R-Functions/EU4_Force_Calculator')
runApp('F:/Google Drive/Paradox Games/R-Functions/EU4_Force_Calculator')
fileName <- "C:/Users/Canadice/Documents/Paradox Interactive/Europa Universalis IV/save games/scraping test.eu4"
file.info(fileName)$size
inFile <- input$data
runApp('F:/Google Drive/Paradox Games/R-Functions/EU4_Force_Calculator')
runApp('F:/Google Drive/Paradox Games/R-Functions/EU4_Force_Calculator')
tags <- read.csv2("tags.csv")
tags <- read.csv2("F:/Google Drive/Paradox Games/R-Functions/EU4_Force_Calculator/tags.csv")
levels(tags$name) <- str_trim(levels(tags$name), "both")
levels(tags$Name) <- str_trim(levels(tags$name), "both")
levels(tags$Name) <- str_trim(levels(tags$Name), "both")
colnames(data) <- c("name", "continent",
"government_rank", "development",
"great_power", "cur_treasury",
"est_month_income", "mil_strength",
"manpower", "cur_army_size")
data$name %in% tags$Tag
which(data$name %in% tags$Tag)
merge.data.frame(x = data$name, y = tags, by = intersect(x, y$Tag))
merge.data.frame(x = data$name, y = tags, by = intersect(data$name, tags$Tag))
merge.data.frame(x = data$name, y = tags, by.x = name, by.y = Tags)
merge.data.frame(x = data, y = tags, by.x = name, by.y = Tags)
merge.data.frame(x = data, y = tags, by.x = "name", by.y = "Tags")
merge.data.frame(x = data, y = tags, by.x = "name", by.y = "Tags")
merge.data.frame(x = data, y = tags, by.x = "name", by.y = "Tags")
merge.data.frame(x = data, y = tags, by.x = "name")
merge.data.frame(x = data, y = tags, by = intersect("name", "Tags"))
merge(x = data, y = tags, by = intersect("name", "Tags"))
merge(x = data, y = tags, by = c("name", "Tags"))
intersect("name", "Tags")
require(dplyr)
inner_join(x = data, y = tags, by = c("name" = "Tags"))
data %>% inner_join(tags, by = c("name" = "Tags"))
data %>% inner_join(tags)
data %>% inner_join(tags, by = "Tags")
data %>% inner_join(tags, by = c("name" = "Tags"))
data %>% inner_join(tags, by = c("name" = "Tag"))
data[which(!is.na(data$continent)),]
data <- data %>% inner_join(tags, by = c("name" = "Tag"))
data[which(!is.na(data$continent)), -"name"]
data[which(!is.na(data$continent)), -c("name")]
data <- data %>% inner_join(tags, by = c("name" = "Tag"))[, -1]
data <- data.frame(matrix(unlist(lapply(country_data_split, FUN = information_compiler)), ncol=10, byrow=TRUE))
data[,4:10] <- apply(apply(data[,4:10], MARGIN = 2, FUN = as.character), MARGIN = 2, FUN = as.numeric)
colnames(data) <- c("name", "continent",
"government_rank", "development",
"great_power", "cur_treasury",
"est_month_income", "mil_strength",
"manpower", "cur_army_size")
data <- data %>% inner_join(tags, by = c("name" = "Tag"))[, -1]
data <- data %>% inner_join(tags, by = c("name" = "Tag"))
data <- data.frame(matrix(unlist(lapply(country_data_split, FUN = information_compiler)), ncol=10, byrow=TRUE))
data[,4:10] <- apply(apply(data[,4:10], MARGIN = 2, FUN = as.character), MARGIN = 2, FUN = as.numeric)
colnames(data) <- c("Tag", "continent",
"government_rank", "development",
"great_power", "cur_treasury",
"est_month_income", "mil_strength",
"manpower", "cur_army_size")
data <- data %>% inner_join(tags)
runApp('F:/Google Drive/Paradox Games/R-Functions/EU4_Force_Calculator')
game_data <- getData()
fileName <- "C:/Users/Canadice/Documents/Paradox Interactive/Europa Universalis IV/save games/scraping test.eu4"
save <- readChar(con = fileName, nchars = file.info(fileName)$size)
levels(tags$Name) <- str_trim(levels(tags$Name), "both")
save_temp <- str_split(save, pattern = "\n")
cl <- makeCluster(getOption("cl.cores", 2))
start <- which(clusterApply(cl, save_temp, fun = str_detect, pattern = "^countries=\\{")[[1]])
end <- which(clusterApply(cl, save_temp, fun = str_detect, pattern = "^\\}")[[1]])
end <- end[end > start][1]
country_data <- save_temp[[1]][start:end]
starts <- which(str_detect(country_data, pattern = "^\t[A-Z]{3}=\\{"))
ends <- c((starts-1)[-1], length(country_data))
indices <- do.call(list, mapply(seq, starts, ends))
country_data_split <- lapply(indices, FUN = function(x){
country_data[x]
})
stopCluster(cl)
information_finder <- function(vector, pattern){
if(pattern != "continent"){
if(!any(str_detect(vector, pattern))){
return(NA)
} else {
data <- vector[which(str_detect(vector, pattern))]
data <- unlist(str_split(data, pattern = "="))[2]
}
} else {
data <- vector[which(str_detect(vector, pattern))+1]
data <- str_trim(str_sub(data, start = 4), side = "right")
data <- str_extract(unlist(str_split(data, " ")), "[0-9]")
if(any(data == 1)){
data <- which(data == 1)[1]
} else {
return(NA)
}
}
return(data)
}
information_compiler <- function(x){
name <- str_extract(x[1], "[A-Z]{3}")
continent <- information_finder(x, "continent")
gov_rank <- information_finder(x, "government_rank")
development <- information_finder(x, "raw_development")
great_power <- information_finder(x, "great_power_score")
cur_treasury <- information_finder(x, "treasury=")
est_month_income <- information_finder(x, "estimated_monthly_income")
mil_strength <- information_finder(x, "military_strength=")
manpower <- information_finder(x, "max_manpower=")
cur_army_size <- information_finder(x, "num_of_regulars")
data <- cbind(name, continent, gov_rank, development, great_power, cur_treasury, est_month_income, mil_strength, manpower, cur_army_size)
return(data)
}
data <- data.frame(matrix(unlist(lapply(country_data_split, FUN = information_compiler)), ncol=10, byrow=TRUE))
data[,4:10] <- apply(apply(data[,4:10], MARGIN = 2, FUN = as.character), MARGIN = 2, FUN = as.numeric)
colnames(data) <- c("Tag", "continent",
"government_rank", "development",
"great_power", "cur_treasury",
"est_month_income", "mil_strength",
"manpower", "cur_army_size")
data <- data %>% inner_join(tags)
data[which(!is.na(data$continent)), ]
data <- data[which(!is.na(data$continent)), ]
game_data <- data
game_data$Army <- rep(NA, nrow(game_data))
game_data$Army[1:3] <- c("Axis", "Allies", "Allies")
game_data_table <- aggregate.data.frame(game_data[, 4:10],
by = list(game_data$Army),
FUN = sum)
game_data_table
colnames(game_data_table) <- c("Army", "development",
"great_power", "cur_treasury",
"est_month_income", "mil_strength",
"manpower", "cur_army_size")
ggplot(data = game_data_table) + aes(x = "", y = manpower, fill = Army) +
geom_bar(stat = "identity", width = 1, color = "black") +
scale_fill_manual(values = c("#c0c0c0", "#E69F00")) + theme_bw() +
scale_x_discrete(breaks = NULL) + scale_y_continuous(expand = c(0,0), breaks = NULL) +
coord_polar(theta = "y", start = 0) +
labs(x = NULL, y = NULL, title = "Manpower") +
theme(panel.grid = element_blank(), panel.border = element_blank(),
plot.title = element_text(hjust = 0.5, size = 15, face = "bold"),
legend.title = element_text(face = "bold"))
runApp('F:/Google Drive/Paradox Games/R-Functions/EU4_Force_Calculator')
game_data_table
runApp('F:/Google Drive/Paradox Games/R-Functions/EU4_Force_Calculator')
game_data$Army <- rep(NA, nrow(game_data))
game_data$Army[which(game_data$Nation %in% input$axis)] <- input$team_1
game_data$Army[1:3] <- input$team_1
game_data$Army[4:8] <- input$team_2
game_data_table <- aggregate.data.frame(game_data[, 4:10],
by = list(game_data$Army),
FUN = sum, na.rm = TRUE)
game_data_table
colnames(game_data_table) <- c("Army", "development",
"great_power", "cur_treasury",
"est_month_income", "mil_strength",
"manpower", "cur_army_size")
ggplot(data = game_data_table) + aes(x = "", y = manpower, fill = Army) +
geom_bar(stat = "identity", width = 1, color = "black") +
scale_fill_manual(values = c("#c0c0c0", "#E69F00")) + theme_bw() +
scale_x_discrete(breaks = NULL) + scale_y_continuous(expand = c(0,0), breaks = NULL) +
coord_polar(theta = "y", start = 0) +
labs(x = NULL, y = NULL, title = "Manpower") +
theme(panel.grid = element_blank(), panel.border = element_blank(),
plot.title = element_text(hjust = 0.5, size = 15, face = "bold"),
legend.title = element_text(face = "bold"))
runApp('F:/Google Drive/Paradox Games/R-Functions/EU4_Force_Calculator')
shiny::runApp(display.mode="showcase")
shiny::runApp(appDir = "F:/Google Drive/Paradox Games/R-Functions/EU4_Force_Calculator",display.mode="showcase")
runApp('F:/Google Drive/Paradox Games/R-Functions/EU4_Force_Calculator')
aggData()
game_data <- getData()
game_data$Army <- rep(NA, nrow(game_data))
game_data$Army[which(game_data$Nation %in% input$axis)] <- input$team_1
game_data$Army[which(game_data$Nation %in% input$allies)] <- input$team_2
game_data_table <- aggregate.data.frame(game_data[, 4:10],
by = list(game_data$Army),
FUN = sum, na.rm = TRUE)
game_data_table
runApp('F:/Google Drive/Paradox Games/R-Functions/EU4_Force_Calculator')
runApp('F:/Google Drive/Paradox Games/R-Functions/EU4_Force_Calculator')
runApp('F:/Google Drive/Paradox Games/R-Functions/EU4_Force_Calculator')
b <- c(1,4,5,8,9,9,10,10,10,11,11,12,12,13,13,14,15)
a <- 1:20
b <- c(1,4,5,8,9,9,10,10,10,11,11,12,12,12,12,13,13,13,13)
a <- 1:20
b <- c(1,4,5,8,9,9,10,10,10,11,11,12,12,12,12,13,13,13,13,14)
plot(a,b)
plot(a, type = "l")
lines(x = b)
lines(x = b, col = "red")
shiny::runApp('F:/GitHubs/eu4_save_analysis')
runApp('F:/GitHubs/eu4_save_analysis')
runApp('F:/GitHubs/eu4_save_analysis')
runApp('F:/GitHubs/eu4_save_analysis')
runApp('F:/GitHubs/eu4_save_analysis')
runApp('F:/GitHubs/eu4_save_analysis')
runApp('F:/GitHubs/eu4_save_analysis')
runApp('F:/GitHubs/eu4_save_analysis')
runApp('F:/GitHubs/eu4_save_analysis')
save <- readLines(con = "C:/Users/Canadice/Documents/Paradox Interactive/Europa Universalis IV/save games/MP_RotR_latest.eu4", encoding = "ANSI", warn = FALSE)
# Sources the different functions needed
source("data_compiler.R")
# Imports a list of tags and responding names of nation
tags <- read.csv2("tags.csv")
##########################################################################
### Splits the save file into the nations parts, starting at the first nation
### Last list object contains the last nation information + all the rest of the save...
# Detects where to start looking for country data
start_country <- which(str_detect(save, pattern = "^countries=\\{"))
# Detects position of } as it defines end of information block.
# As the game progresses, } without any tabs are inserted resulting in the following
# solution to make the last list-object takes the whole rest of the save to the end.
# Subsets just the country data, might be unecessary.
country_data <- save[start_country:length(save)]
# Same as above with provinces
starts <- which(str_detect(country_data, pattern = "^\t[A-Z]{3}=\\{"))
ends <- c((starts-1)[-1], length(country_data))
indices <- do.call(list, mapply(seq, starts, ends))
country_data_split <- lapply(indices, FUN = function(x){country_data[x]})
##########################################################################
### Splits the save file into the province parts, starting at the first province
### Last list object contains the last province information + all the rest of the save...
# Detects where to start the individual province data
starts_provinces <- which(str_detect(save, pattern = "^-[0-9]+=\\{"))
# As starts portion off the different provinces, ends are the one line before
# The list of provinces end where countries start so the last province will end on the line before
ends_provinces <- c((starts_provinces-1)[-1], start_country-1)
# Splits the data into a list of their individual province information
indices <- do.call(list, mapply(seq, starts_provinces, ends_provinces))
province_data_split <- lapply(indices, FUN = function(x){save[x]})
# Removes original save and indices to save at least some working space
rm(list = c("ends", "starts", "starts_provinces", "ends_provinces", "start_country", "indices", "save"))
##########################################################################
# Compiles the province data to a list, parallel processing to speed the list up
cl <- makeCluster(getOption("cl.cores", 4))
clusterExport(cl, varlist = c("information_finder", "province_information_scraper"))
data <- parLapply(cl = cl, X = province_data_split, fun = province_information_compiler)
stopCluster(cl)
# Takes all information in the list and concatenate into a data frame
province_data <- data %>%
Reduce(function(dtf1,dtf2) suppressWarnings(bind_rows(dtf1,dtf2)), .)
# Finds the column index for sorting
buildings <- which(colnames(province_data) %in% c("marketplace", "workshop", "temple", "barracks", "shipyard", "fort_15th",
"courthouse", "dock", "regimental_camp", "fort_16th",
"cathedral", "university", "trade_depot", "grand_shipyard", "training_fields", "fort_17th",
"stock_exchange", "counting_house", "town_hall", "drydock", "conscription_center", "fort_18th",
"wharf", "weapons", "textile", "plantations", "tradecompany")
)
fort <- which(str_detect(colnames(x = province_data), pattern = "^fort_inf"))
cores <- which(str_detect(colnames(x = province_data), pattern = "^core"))
claims <- which(str_detect(colnames(x = province_data), pattern = "^claim"))
base <- which(str_detect(colnames(x = province_data), pattern = "^base"))
PID <- which(str_detect(colnames(x = province_data), pattern = "^PID"))
originals <- which(str_detect(colnames(x = province_data), pattern = "^original"))
info <- which(colnames(province_data) %in% c("name", "culture", "religion", "capital", "trade_goods", "trade_power",
"trade", "local_autonomy", "hre", "owner")
)
ordering_index <- c(PID, info, base, buildings, fort, cores, claims, originals)
province_data <- province_data[,order(colnames(province_data))]
# Takes all information in the list and concatenate into a data frame
province_data <- data %>%
Reduce(function(dtf1,dtf2) suppressWarnings(bind_rows(dtf1,dtf2)), .)
# Finds the column index for sorting
buildings <- which(colnames(province_data) %in% c("marketplace", "workshop", "temple", "barracks", "shipyard", "fort_15th",
"courthouse", "dock", "regimental_camp", "fort_16th",
"cathedral", "university", "trade_depot", "grand_shipyard", "training_fields", "fort_17th",
"stock_exchange", "counting_house", "town_hall", "drydock", "conscription_center", "fort_18th",
"wharf", "weapons", "textile", "plantations", "tradecompany")
)
fort <- which(str_detect(colnames(x = province_data), pattern = "^fort_inf"))
cores <- which(str_detect(colnames(x = province_data), pattern = "^core"))
claims <- which(str_detect(colnames(x = province_data), pattern = "^claim"))
base <- which(str_detect(colnames(x = province_data), pattern = "^base"))
PID <- which(str_detect(colnames(x = province_data), pattern = "^PID"))
originals <- which(str_detect(colnames(x = province_data), pattern = "^original"))
info <- which(colnames(province_data) %in% c("name", "culture", "religion", "capital", "trade_goods", "trade_power",
"trade", "local_autonomy", "hre", "owner")
)
ordering_index <- c(PID, info, base, buildings, fort, cores, claims, originals)
province_data <- province_data[,c(ordering_index, (1:ncol(province_data))[-ordering_index])]
# Compiles the country data to a list
data <- lapply(country_data_split, FUN = country_information_compiler)
# Takes all information in the list and concatenate into a data frame
country_data <- data.frame(matrix(unlist(data), ncol=ncol(data[[1]]), byrow=TRUE, dimnames = list(NULL, colnames(data[[1]]))))
# Converts the numerical country data to numeric
country_data[,c(4:10, 12)] <- apply(apply(country_data[,c(4:10, 12)], MARGIN = 2, FUN = as.character), MARGIN = 2, FUN = as.numeric)
# Merges with the province data for each of the countries' capitals
country_data <- country_data %>% left_join(province_data[, c("PID", "hre")], by = c("capital" = "PID"))
# Merges with the country name data from tags
country_data <- country_data %>% inner_join(tags, by = c("name" = "Tag"))
resulting_data <- list(province = province_data, country = country_data[which(!is.na(country_data$continent)),])
data <- lapply(country_data_split, FUN = country_information_compiler)
country_data <- data.frame(matrix(unlist(data), ncol=ncol(data[[1]]), byrow=TRUE, dimnames = list(NULL, colnames(data[[1]]))))
country_data
country_data[,c(4:10, 12)] <- apply(apply(country_data[,c(4:10, 12)], MARGIN = 2, FUN = as.character), MARGIN = 2, FUN = as.numeric)
country_data <- country_data %>% left_join(province_data[, c("PID", "hre")], by = c("capital" = "PID"))
country_data
country_data <- country_data %>% inner_join(tags, by = c("name" = "Tag"))
tags <- read.csv2("tags.csv")
tags <- read.csv2("tags.csv")
setwd("~/")
setwd("F:/GitHubs/eu4_save_analysis")
tags <- read.csv2("tags.csv")
country_data <- country_data %>% inner_join(tags, by = c("name" = "Tag"))
resulting_data <- list(province = province_data, country = country_data[which(!is.na(country_data$continent)),])
game_data <- save_processing(save)
save <- readLines(con = "C:/Users/Canadice/Documents/Paradox Interactive/Europa Universalis IV/save games/MP_RotR_latest.eu4", encoding = "ANSI", warn = FALSE)
game_data <- save_processing(save)
source("save_scraper.R")
game_data <- save_processing(save)
save(game_data, file = "latest_rotr.RData")
View(country_data)
library(shiny, quietly = TRUE)
library(stringr, quietly = TRUE)
require(ggplot2, quietly = TRUE)
require(dplyr, quietly = TRUE)
require(tidyr, quietly = TRUE)
require(stringr, quietly = TRUE)
require(parallel, quietly = TRUE)
require(shinycssloaders, quietly = TRUE)
source("save_scraper.R")
source("data_compiler.R")
save <- readLines(con = "C:/Users/Canadice/Documents/Paradox Interactive/Europa Universalis IV/save games/MP_RotR_latest.eu4", encoding = "ANSI", warn = FALSE)
game_data <- save_processing(save)
runApp()
runApp()
country_data[, c(ind, colnames(country_data)[!colnames(country_data) %in% ind])]
ind <- c("tag", "Name")
country_data[, c(ind, colnames(country_data)[!colnames(country_data) %in% ind])]
colnames(country_data)
c(ind, colnames(country_data)[!colnames(country_data) %in% ind])
save <- readLines(con = "C:/Users/Canadice/Documents/Paradox Interactive/Europa Universalis IV/save games/MP_RotR_latest.eu4", encoding = "ANSI", warn = FALSE)
game_data <- save_processing(save)
source("save_scraper.R")
source("data_compiler.R")
game_data <- save_processing(save)
require(shinycssloaders, quietly = TRUE)
source("save_scraper.R")
source("data_compiler.R")
game_data <- save_processing(save)
