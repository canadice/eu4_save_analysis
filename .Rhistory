var_names[duplicated(var_names)] <- paste(var_names[duplicated(var_names)], 1:length(duplicated(var_names)), sep = "")
}
paste(var_names[duplicated(var_names)], 1:length(duplicated(var_names)), sep = "")
if(any(duplicated(var_names))){
var_names[duplicated(var_names)] <- paste(var_names[duplicated(var_names)], 1:sum(duplicated(var_names)), sep = "")
}
data.frame(clean_information_matrix[2,], row.names = var_names)
t(data.frame(clean_information_matrix[2,], row.names = var_names))
t(data.frame(values = clean_information_matrix[2,], row.names = var_names))
temp <- t(data.frame(values = clean_information_matrix[2,], row.names = var_names))
temp <- data.frame(values = clean_information_matrix[2,], row.names = var_names)
temp <- data.frame(values = clean_information_matrix[2,], row.names = var_names)
temp <- spread(data.frame(values = clean_information_matrix[2,], row.names = var_names), key = values)
temp <- spread(data.frame(values = clean_information_matrix[2,], row.names = var_names), value = values)
data.frame(values = clean_information_matrix[2,], row.names = var_names)
temp <- spread(data.frame(values = clean_information_matrix[2,], row.names = var_names))
temp <- as.data.frame(t(data.frame(values = clean_information_matrix[2,], row.names = var_names)))
sapply()
sapply(temp, FUN = is.numeric)
sapply(temp, FUN = function(x){is.numeric(levels(x))})
sapply(temp, FUN = function(x){as.numeric(levels(x))})
sapply(temp, FUN = function(x){!is.na(as.numeric(levels(x)))})
warnings()
sapply(temp, FUN = function(x){!is.na(suppressWarnings(as.numeric(levels(x))))})
clean_information_data <- as.data.frame(t(data.frame(values = clean_information_matrix[2,], row.names = var_names)))
num_indices <- sapply(clean_information_data, FUN = function(x){!is.na(suppressWarnings(as.numeric(levels(x))))})
num_indices
sapply(clean_information_data[,num_indices], FUN = function(x){as.numeric(levels(x))})
clean_information_data[,num_indices] <- sapply(clean_information_data[,num_indices], FUN = function(x){as.numeric(levels(x))})
source("data_compiler.R")
data <- lapply(province_data_split, FUN = province_information_compiler)
data
x <- province_data_split[[1]]
capital <- str_extract(x[1], "[0-9]+")
hre <- information_finder(x, "hre=")
hre
other_information <- province_information_scraper(x)
source("value_scraper.R")
other_information <- province_information_scraper(x)
other_information <- province_information_scraper(x)
setwd("F:/Google Drive/Paradox Games/R-Functions/EU4_Force_Calculator")
setwd("F:/GitHubs/eu4_save_analysis")
source("value_scraper.R")
other_information <- province_information_scraper(x)
data <- cbind(capital, hre, other_information)
data <- lapply(province_data_split, FUN = province_information_compiler)
source("data_compiler.R")
data <- lapply(province_data_split, FUN = province_information_compiler)
require(parallel, quietly = TRUE)
cl <- makeCluster(getOption("cl.cores", 2))
data <- clusterApply(cl = cl, x = province_data_split, fun = province_information_compiler)
data <- clusterApply(cl = cl, x = province_data_split, fun = province_information_compiler)
source("data_compiler.R")
cl <- makeCluster(getOption("cl.cores", 2))
data <- clusterApply(cl = cl, x = province_data_split, fun = province_information_compiler)
stopCluster(cl)
cl <- makeCluster(getOption("cl.cores", 2))
data <- clusterApply(cl = cl, x = province_data_split, fun = province_information_compiler)
stopCluster(cl)
province_data <- data.frame(matrix(unlist(data), ncol=ncol(data[[1]]), byrow=TRUE, dimnames = list(NULL, colnames(data[[1]]))))
data %>%
Reduce(function(dtf1,dtf2) full_join(dtf1,dtf2,by="PID"), .)
data[[4267]]
load("latest_rotr.RData")
save <- readLines(con = "C:/Users/Canadice/Documents/Paradox Interactive/Europa Universalis IV/save games/MP_RotR_latest.eu4",
encoding = "UTF-8",
warn = FALSE)
source("data_compiler.R")
start_country <- which(str_detect(save, pattern = "^countries=\\{"))
country_data <- save[start_country:length(save)]
starts <- which(str_detect(country_data, pattern = "^\t[A-Z]{3}=\\{"))
ends <- c((starts-1)[-1], length(country_data))
indices <- do.call(list, mapply(seq, starts, ends))
country_data_split <- lapply(indices, FUN = function(x){country_data[x]})
starts_provinces <- which(str_detect(save, pattern = "^-[0-9]+=\\{"))
ends_provinces <- c((starts_provinces-1)[-1], start_country-1)
indices <- do.call(list, mapply(seq, starts_provinces, ends_provinces))
province_data_split <- lapply(indices, FUN = function(x){save[x]})
rm(list = c("end", "ends", "start", "starts", "starts_provinces", "ends_provinces", "start_country", "indices", "save"))
data <- lapply(province_data_split, FUN = province_information_compiler)
data[[4267]]
cl <- makeCluster(getOption("cl.cores", 2))
data <- clusterApply(cl = cl, x = province_data_split, fun = province_information_compiler)
stopCluster(cl)
stopCluster(cl)
stopCluster(cl)
cl <- makeCluster(getOption("cl.cores", 2))
data <- clusterApply(cl = cl, x = province_data_split, fun = province_information_compiler)
stopCluster(cl)
cl <- makeCluster(getOption("cl.cores", 2))
data <- parLapply(cl = cl, X = province_data_split, fun = province_information_compiler)
data <- parLapply(cl = cl, X = province_data_split, fun = province_information_compiler)
province_data_split
source("data_compiler.R")
library(shiny, quietly = TRUE)
library(stringr, quietly = TRUE)
require(ggplot2, quietly = TRUE)
require(dplyr, quietly = TRUE)
require(tidyr, quietly = TRUE)
require(stringr, quietly = TRUE)
require(parallel, quietly = TRUE)
source("save_scraper.R")
source("data_compiler.R")
# Compiles the following information using function information_finder from value_scraper
information_finder <- function(vector, pattern){
# Loads required packages and functions
require(stringr, quietly = TRUE)
require(dplyr, quietly = TRUE)
# Otherwise all the other standard values wanted should be right after the information tag (pattern) and =
if(pattern != "continent"){
if(!any(str_detect(vector, pattern))){
return(NA)
} else {
# Finds the element in the current list where the pattern exists
data <- vector[which(str_detect(vector, pattern))]
# Takes the value as it comes after the splitting symbol "="
data <- unlist(str_split(data, pattern = "="))[2]
}
# Since continent is a vector of six 0s and 1s this one is different
} else {
data <- vector[which(str_detect(vector, pattern))+1]
data <- str_trim(str_sub(data, start = 4), side = "right")
data <- str_extract(unlist(str_split(data, " ")), "[0-9]")
if(any(data == 1)){
data <- which(data == 1)[1]
} else {
return(NA)
}
}
return(data)
}
province_information_scraper <- function(list_vector){
# Loads required packages and functions
require(stringr, quietly = TRUE)
require(dplyr, quietly = TRUE)
information_indices <- str_detect(list_vector, pattern = "=") & !str_detect(list_vector, pattern = "[{}]")
information <- list_vector[information_indices]
information_indices <- str_detect(information, pattern = "^\t\t[a-z]")
information <- information[information_indices]
clean_information <- str_replace_all(information, pattern = "[\t\"]", replacement = "")
clean_information_matrix <- matrix(unlist(str_split(string = clean_information, pattern = "=")), ncol = length(clean_information), byrow = FALSE)
var_names <- clean_information_matrix[1,]
if(any(duplicated(var_names))){
var_names[duplicated(var_names)] <- paste(var_names[duplicated(var_names)], 1:sum(duplicated(var_names)), sep = "")
}
clean_information_data <- as.data.frame(t(data.frame(values = clean_information_matrix[2,], row.names = var_names)))
num_indices <- sapply(clean_information_data, FUN = function(x){!is.na(suppressWarnings(as.numeric(levels(x))))})
clean_information_data[,num_indices] <- sapply(clean_information_data[,num_indices], FUN = function(x){as.numeric(levels(x))})
return(clean_information_data)
}
country_information_compiler <- function(x){
# Loads required packages and functions
require(stringr, quietly = TRUE)
require(dplyr, quietly = TRUE)
name <- str_extract(x[1], "[A-Z]{3}")
continent <- information_finder(x, "continent")
gov_rank <- information_finder(x, "government_rank")
development <- information_finder(x, "raw_development")
great_power <- information_finder(x, "great_power_score")
cur_treasury <- information_finder(x, "treasury=")
est_month_income <- information_finder(x, "estimated_monthly_income")
mil_strength <- information_finder(x, "military_strength=")
manpower <- information_finder(x, "max_manpower=")
cur_army_size <- information_finder(x, "num_of_regulars")
religion <- information_finder(x, "^\t\treligion=")
capital <- information_finder(x, "^\t\tcapital=")
data <- cbind(name, continent, gov_rank, development, great_power, cur_treasury,
est_month_income, mil_strength, manpower, cur_army_size, religion, capital)
return(data)
}
province_information_compiler <- function(x){
# Loads required packages and functions
require(stringr, quietly = TRUE)
require(dplyr, quietly = TRUE)
PID <- str_extract(x[1], "[0-9]+")
hre <- information_finder(x, "hre=")
other_information <- province_information_scraper(x)
data <- cbind(PID, hre, other_information)
return(data)
}
province_information_compiler <- function(x){
# Loads required packages and functions
require(stringr, quietly = TRUE)
require(dplyr, quietly = TRUE)
PID <- str_extract(x[1], "[0-9]+")
hre <- information_finder(x, "hre=")
other_information <- province_information_scraper(x)
data <- cbind(PID, hre, other_information)
return(data)
}
country_information_compiler <- function(x){
# Loads required packages and functions
require(stringr, quietly = TRUE)
require(dplyr, quietly = TRUE)
name <- str_extract(x[1], "[A-Z]{3}")
continent <- information_finder(x, "continent")
gov_rank <- information_finder(x, "government_rank")
development <- information_finder(x, "raw_development")
great_power <- information_finder(x, "great_power_score")
cur_treasury <- information_finder(x, "treasury=")
est_month_income <- information_finder(x, "estimated_monthly_income")
mil_strength <- information_finder(x, "military_strength=")
manpower <- information_finder(x, "max_manpower=")
cur_army_size <- information_finder(x, "num_of_regulars")
religion <- information_finder(x, "^\t\treligion=")
capital <- information_finder(x, "^\t\tcapital=")
data <- cbind(name, continent, gov_rank, development, great_power, cur_treasury,
est_month_income, mil_strength, manpower, cur_army_size, religion, capital)
return(data)
}
country_information_compiler <- function(x){
# Loads required packages and functions
require(stringr, quietly = TRUE)
require(dplyr, quietly = TRUE)
name <- str_extract(x[1], "[A-Z]{3}")
continent <- information_finder(x, "continent")
gov_rank <- information_finder(x, "government_rank")
development <- information_finder(x, "raw_development")
great_power <- information_finder(x, "great_power_score")
cur_treasury <- information_finder(x, "treasury=")
est_month_income <- information_finder(x, "estimated_monthly_income")
mil_strength <- information_finder(x, "military_strength=")
manpower <- information_finder(x, "max_manpower=")
cur_army_size <- information_finder(x, "num_of_regulars")
religion <- information_finder(x, "^\t\treligion=")
capital <- information_finder(x, "^\t\tcapital=")
data <- cbind(name, continent, gov_rank, development, great_power, cur_treasury,
est_month_income, mil_strength, manpower, cur_army_size, religion, capital)
return(data)
}
province_information_scraper <- function(list_vector){
# Loads required packages and functions
require(stringr, quietly = TRUE)
require(dplyr, quietly = TRUE)
information_indices <- str_detect(list_vector, pattern = "=") & !str_detect(list_vector, pattern = "[{}]")
information <- list_vector[information_indices]
information_indices <- str_detect(information, pattern = "^\t\t[a-z]")
information <- information[information_indices]
clean_information <- str_replace_all(information, pattern = "[\t\"]", replacement = "")
clean_information_matrix <- matrix(unlist(str_split(string = clean_information, pattern = "=")), ncol = length(clean_information), byrow = FALSE)
var_names <- clean_information_matrix[1,]
if(any(duplicated(var_names))){
var_names[duplicated(var_names)] <- paste(var_names[duplicated(var_names)], 1:sum(duplicated(var_names)), sep = "")
}
clean_information_data <- as.data.frame(t(data.frame(values = clean_information_matrix[2,], row.names = var_names)))
num_indices <- sapply(clean_information_data, FUN = function(x){!is.na(suppressWarnings(as.numeric(levels(x))))})
clean_information_data[,num_indices] <- sapply(clean_information_data[,num_indices], FUN = function(x){as.numeric(levels(x))})
return(clean_information_data)
}
information_finder <- function(vector, pattern){
# Loads required packages and functions
require(stringr, quietly = TRUE)
require(dplyr, quietly = TRUE)
# Otherwise all the other standard values wanted should be right after the information tag (pattern) and =
if(pattern != "continent"){
if(!any(str_detect(vector, pattern))){
return(NA)
} else {
# Finds the element in the current list where the pattern exists
data <- vector[which(str_detect(vector, pattern))]
# Takes the value as it comes after the splitting symbol "="
data <- unlist(str_split(data, pattern = "="))[2]
}
# Since continent is a vector of six 0s and 1s this one is different
} else {
data <- vector[which(str_detect(vector, pattern))+1]
data <- str_trim(str_sub(data, start = 4), side = "right")
data <- str_extract(unlist(str_split(data, " ")), "[0-9]")
if(any(data == 1)){
data <- which(data == 1)[1]
} else {
return(NA)
}
}
return(data)
}
source("data_compiler.R")
tags <- read.csv2("tags.csv")
start_country <- which(str_detect(save, pattern = "^countries=\\{"))
save <- readLines(con = "C:/Users/Canadice/Documents/Paradox Interactive/Europa Universalis IV/save games/MP_RotR_latest.eu4", encoding = "UTF-8", warn = FALSE)
# Imports a list of tags and responding names of nation
tags <- read.csv2("tags.csv")
##########################################################################
### Splits the save file into the nations parts, starting at the first nation
### Last list object contains the last nation information + all the rest of the save...
# Detects where to start looking for country data
start_country <- which(str_detect(save, pattern = "^countries=\\{"))
# Detects position of } as it defines end of information block.
# As the game progresses, } without any tabs are inserted resulting in the following
# solution to make the last list-object takes the whole rest of the save to the end.
# Subsets just the country data, might be unecessary.
country_data <- save[start_country:length(save)]
# Same as above with provinces
starts <- which(str_detect(country_data, pattern = "^\t[A-Z]{3}=\\{"))
ends <- c((starts-1)[-1], length(country_data))
indices <- do.call(list, mapply(seq, starts, ends))
country_data_split <- lapply(indices, FUN = function(x){country_data[x]})
##########################################################################
### Splits the save file into the province parts, starting at the first province
### Last list object contains the last province information + all the rest of the save...
# Detects where to start the individual province data
starts_provinces <- which(str_detect(save, pattern = "^-[0-9]+=\\{"))
# As starts portion off the different provinces, ends are the one line before
# The list of provinces end where countries start so the last province will end on the line before
ends_provinces <- c((starts_provinces-1)[-1], start_country-1)
# Splits the data into a list of their individual province information
indices <- do.call(list, mapply(seq, starts_provinces, ends_provinces))
province_data_split <- lapply(indices, FUN = function(x){save[x]})
# Removes original save and indices to save at least some working space
rm(list = c("ends", "starts", "starts_provinces", "ends_provinces", "start_country", "indices", "save"))
##########################################################################
cl <- makeCluster(getOption("cl.cores", 4))
data <- parLapply(cl = cl, X = province_data_split, fun = province_information_compiler)
clusterExport(cl, varlist = c("information_finder"))
data <- parLapply(cl = cl, X = province_data_split, fun = province_information_compiler)
clusterExport(cl, varlist = c("information_finder", "province_information_scraper"))
data <- parLapply(cl = cl, X = province_data_split, fun = province_information_compiler)
stopCluster(cl)
temp <- data %>%
Reduce(function(dtf1,dtf2) full_join(dtf1,dtf2,by="PID"), .)
warnings()
source("data_compiler.R")
# Compiles the province data to a list, parallel processing to speed the list up
cl <- makeCluster(getOption("cl.cores", 4))
clusterExport(cl, varlist = c("information_finder", "province_information_scraper"))
data <- parLapply(cl = cl, X = province_data_split, fun = province_information_compiler)
stopCluster(cl)
temp <- data %>%
Reduce(function(dtf1,dtf2) full_join(dtf1,dtf2,by="PID"), .)
temp <- data %>%
Reduce(function(dtf1,dtf2) full_join(dtf1,dtf2,by="PID"), .)
temp <- data[[1:10]] %>%
Reduce(function(dtf1,dtf2) full_join(dtf1,dtf2,by="PID"), .)
data[[1:10]]
data[[1]]
data[[2]]
data[1:2]
temp <- data[1:10] %>%
Reduce(function(dtf1,dtf2) full_join(dtf1,dtf2,by="PID"), .)
View(temp)
temp <- data[1:10] %>%
Reduce(function(dtf1,dtf2) full_join(dtf1,dtf2), .)
warnings()
source("data_compiler.R")
# Compiles the province data to a list, parallel processing to speed the list up
cl <- makeCluster(getOption("cl.cores", 4))
clusterExport(cl, varlist = c("information_finder", "province_information_scraper"))
data <- parLapply(cl = cl, X = province_data_split, fun = province_information_compiler)
stopCluster(cl)
source("data_compiler.R")
# Compiles the province data to a list, parallel processing to speed the list up
cl <- makeCluster(getOption("cl.cores", 4))
clusterExport(cl, varlist = c("information_finder", "province_information_scraper"))
data <- parLapply(cl = cl, X = province_data_split, fun = province_information_compiler)
stopCluster(cl)
temp <- data[1:10] %>%
Reduce(function(dtf1,dtf2) full_join(dtf1,dtf2), .)
source("data_compiler.R")
# Compiles the province data to a list, parallel processing to speed the list up
cl <- makeCluster(getOption("cl.cores", 4))
clusterExport(cl, varlist = c("information_finder", "province_information_scraper"))
data <- parLapply(cl = cl, X = province_data_split, fun = province_information_compiler)
stopCluster(cl)
temp <- data[1:10] %>%
Reduce(function(dtf1,dtf2) full_join(dtf1,dtf2), .)
temp <- data[1:10] %>%
Reduce(function(dtf1,dtf2) full_join(dtf1,dtf2, by = "PID"), .)
temp <- data[1:10] %>%
Reduce(function(dtf1,dtf2) bind_rows(dtf1,dtf2), .)
View(temp)
province_data <- data %>%
Reduce(function(dtf1,dtf2) bind_rows(dtf1,dtf2), .)
warnings()
source("data_compiler.R")
# Compiles the province data to a list, parallel processing to speed the list up
cl <- makeCluster(getOption("cl.cores", 4))
clusterExport(cl, varlist = c("information_finder", "province_information_scraper"))
data <- parLapply(cl = cl, X = province_data_split, fun = province_information_compiler)
stopCluster(cl)
# Takes all information in the list and concatenate into a data frame
province_data <- data %>%
Reduce(function(dtf1,dtf2) bind_rows(dtf1,dtf2), .)
warnings()
province_data <- data %>%
suppressWarnings(Reduce(function(dtf1,dtf2) bind_rows(dtf1,dtf2), .))
province_data <- data %>%
Reduce(function(dtf1,dtf2) suppressWarnings(bind_rows(dtf1,dtf2)), .)
View(province_data)
str_replace_all(province_data, pattern = "<U+FFD>", replacement = "Ö")
sapply(province_data, FUN = str_replace_all, pattern = "<U+FFD>", replacement = "Ö")
province_data
sapply(province_data, FUN = str_replace_all, pattern = "<U+FFFD>", replacement = "Ö")
sapply(province_data, FUN = str_replace_all, pattern = "<U\\+FFFD>", replacement = "Ö")
enc2utf8(province_data)
sapply(province_data, FUN = enc2utf8)
enc2utf8(province_data$name)
Encoding(province_data$name) <- "UTF-8"
save <- readLines(con = "C:/Users/Canadice/Documents/Paradox Interactive/Europa Universalis IV/save games/MP_RotR_latest.eu4", encoding = "UTF-8", warn = FALSE)
##########################################################################
### Splits the save file into the nations parts, starting at the first nation
### Last list object contains the last nation information + all the rest of the save...
# Detects where to start looking for country data
start_country <- which(str_detect(save, pattern = "^countries=\\{"))
# Detects position of } as it defines end of information block.
# As the game progresses, } without any tabs are inserted resulting in the following
# solution to make the last list-object takes the whole rest of the save to the end.
# Subsets just the country data, might be unecessary.
country_data <- save[start_country:length(save)]
# Same as above with provinces
starts <- which(str_detect(country_data, pattern = "^\t[A-Z]{3}=\\{"))
ends <- c((starts-1)[-1], length(country_data))
indices <- do.call(list, mapply(seq, starts, ends))
country_data_split <- lapply(indices, FUN = function(x){country_data[x]})
View(province_data)
save <- readLines(con = "C:/Users/Canadice/Documents/Paradox Interactive/Europa Universalis IV/save games/MP_RotR_latest.eu4", encoding = "ANSI", warn = FALSE)
source("data_compiler.R")
# Imports a list of tags and responding names of nation
tags <- read.csv2("tags.csv")
##########################################################################
### Splits the save file into the nations parts, starting at the first nation
### Last list object contains the last nation information + all the rest of the save...
# Detects where to start looking for country data
start_country <- which(str_detect(save, pattern = "^countries=\\{"))
# Detects position of } as it defines end of information block.
# As the game progresses, } without any tabs are inserted resulting in the following
# solution to make the last list-object takes the whole rest of the save to the end.
# Subsets just the country data, might be unecessary.
country_data <- save[start_country:length(save)]
# Same as above with provinces
starts <- which(str_detect(country_data, pattern = "^\t[A-Z]{3}=\\{"))
ends <- c((starts-1)[-1], length(country_data))
indices <- do.call(list, mapply(seq, starts, ends))
country_data_split <- lapply(indices, FUN = function(x){country_data[x]})
##########################################################################
### Splits the save file into the province parts, starting at the first province
### Last list object contains the last province information + all the rest of the save...
# Detects where to start the individual province data
starts_provinces <- which(str_detect(save, pattern = "^-[0-9]+=\\{"))
# As starts portion off the different provinces, ends are the one line before
# The list of provinces end where countries start so the last province will end on the line before
ends_provinces <- c((starts_provinces-1)[-1], start_country-1)
# Splits the data into a list of their individual province information
indices <- do.call(list, mapply(seq, starts_provinces, ends_provinces))
province_data_split <- lapply(indices, FUN = function(x){save[x]})
rm(list = c("ends", "starts", "starts_provinces", "ends_provinces", "start_country", "indices", "save"))
##########################################################################
# Compiles the province data to a list, parallel processing to speed the list up
cl <- makeCluster(getOption("cl.cores", 4))
clusterExport(cl, varlist = c("information_finder", "province_information_scraper"))
data <- parLapply(cl = cl, X = province_data_split, fun = province_information_compiler)
stopCluster(cl)
# Takes all information in the list and concatenate into a data frame
province_data <- data %>%
Reduce(function(dtf1,dtf2) suppressWarnings(bind_rows(dtf1,dtf2)), .)
View(province_data)
source('F:/GitHubs/eu4_save_analysis/save_scraper.R', echo=TRUE)
runApp()
# Compiles the country data to a list
data <- lapply(country_data_split, FUN = country_information_compiler)
# Takes all information in the list and concatenate into a data frame
country_data <- data.frame(matrix(unlist(data), ncol=ncol(data[[1]]), byrow=TRUE, dimnames = list(NULL, colnames(data[[1]]))))
# Converts the numerical country data to numeric
country_data[,4:10] <- apply(apply(country_data[,4:10], MARGIN = 2, FUN = as.character), MARGIN = 2, FUN = as.numeric)
# Merges with the province data for each of the countries' capitals
country_data <- country_data %>% left_join(province_data, by.x = "capital", by.y = "PID")
# Merges with the country name data from tags
country_data <- country_data %>% inner_join(tags, by = "Tag")
country_data <- country_data %>% left_join(province_data[, c("PID", "hre")], by.x = "capital", by.y = "PID")
country_data <- data.frame(matrix(unlist(data), ncol=ncol(data[[1]]), byrow=TRUE, dimnames = list(NULL, colnames(data[[1]]))))
country_data[,4:10] <- apply(apply(country_data[,4:10], MARGIN = 2, FUN = as.character), MARGIN = 2, FUN = as.numeric)
country_data <- country_data %>% left_join(province_data[, c("PID", "hre")], by.x = "capital", by.y = "PID")
province_data[, c("PID", "hre")]
country_data <- country_data %>% left_join(province_data[, c("PID", "hre")], by = c("capital", "PID"))
country_data <- country_data %>% left_join(province_data[, c("PID", "hre")], by = c("capital" = "PID"))
source("data_compiler.R")
# Compiles the country data to a list
data <- lapply(country_data_split, FUN = country_information_compiler)
# Takes all information in the list and concatenate into a data frame
country_data <- data.frame(matrix(unlist(data), ncol=ncol(data[[1]]), byrow=TRUE, dimnames = list(NULL, colnames(data[[1]]))))
# Converts the numerical country data to numeric
country_data[,4:10] <- apply(apply(country_data[,4:10], MARGIN = 2, FUN = as.character), MARGIN = 2, FUN = as.numeric)
# Merges with the province data for each of the countries' capitals
country_data <- country_data %>% left_join(province_data[, c("PID", "hre")], by = c("capital" = "PID"))
as.numeric(levels(information_finder(x, "^\t\tcapital=")))
x <- country_data_split[[1]]
as.numeric(levels(information_finder(x, "^\t\tcapital=")))
information_finder(x, "^\t\tcapital=")
as.numeric(information_finder(x, "^\t\tcapital="))
source("data_compiler.R")
# Takes all information in the list and concatenate into a data frame
country_data <- data.frame(matrix(unlist(data), ncol=ncol(data[[1]]), byrow=TRUE, dimnames = list(NULL, colnames(data[[1]]))))
# Converts the numerical country data to numeric
country_data[,4:10] <- apply(apply(country_data[,4:10], MARGIN = 2, FUN = as.character), MARGIN = 2, FUN = as.numeric)
# Merges with the province data for each of the countries' capitals
country_data <- country_data %>% left_join(province_data[, c("PID", "hre")], by = c("capital" = "PID"))
country_data <- data.frame(matrix(unlist(data), ncol=ncol(data[[1]]), byrow=TRUE, dimnames = list(NULL, colnames(data[[1]]))))
data <- lapply(country_data_split, FUN = country_information_compiler)
country_data <- data.frame(matrix(unlist(data), ncol=ncol(data[[1]]), byrow=TRUE, dimnames = list(NULL, colnames(data[[1]]))))
country_data[,4:10] <- apply(apply(country_data[,4:10], MARGIN = 2, FUN = as.character), MARGIN = 2, FUN = as.numeric)
country_data <- data.frame(matrix(unlist(data), ncol=ncol(data[[1]]), byrow=TRUE, dimnames = list(NULL, colnames(data[[1]]))), stringsAsFactors = FALSE)
country_data <- data.frame(matrix(unlist(data), ncol=ncol(data[[1]]), byrow=TRUE, dimnames = list(NULL, colnames(data[[1]]))))
country_data[,c(4:10, "capital")] <- apply(apply(country_data[,c(4:10, "capital")], MARGIN = 2, FUN = as.character), MARGIN = 2, FUN = as.numeric)
c(4:10, "capital")
country_data[,c(4:10, 12)] <- apply(apply(country_data[,c(4:10, 12)], MARGIN = 2, FUN = as.character), MARGIN = 2, FUN = as.numeric)
country_data <- country_data %>% left_join(province_data[, c("PID", "hre")], by = c("capital" = "PID"))
country_data <- country_data %>% inner_join(tags, by = "Tag")
country_data <- country_data %>% inner_join(tags, by = c("name" = "Tag"))
runApp()
game_data <- save_processing(save)
save <- readLines(con = "C:/Users/Canadice/Documents/Paradox Interactive/Europa Universalis IV/save games/MP_RotR_latest.eu4", encoding = "ANSI", warn = FALSE)
game_data <- save_processing(save)
save(game_data, file = "latest_rotr.RData")
