test <- lapply(test, FUN = function(x){
if(length(x) == 3){
NULL
} else {
tag <- str_extract(unlist(x), pattern = "[A-Z]+")
data <- x[[4]][2]
data <- str_split(data, pattern = "[ =]")
data <- lapply(data, FUN = function(x){
data <- matrix(unlist(x[-length(x)]), nrow = 2)
data_frame <- data.frame(data, stringsAsFactors = FALSE)[-1,]
names(data_frame) <- data[1,]
data_frame
})
data <- unlist(data)
names(data) <- tag
data
}
})
test <- lapply(test, FUN = function(x){
if(length(x) == 3){
NULL
} else {
tag <- str_extract(unlist(x), pattern = "[A-Z]+")
data <- x[[4]][2]
data <- str_split(data, pattern = "[ =]")
data <- lapply(data, FUN = function(x){
data <- matrix(unlist(x[-length(x)]), nrow = 2)
data_frame <- data.frame(data, stringsAsFactors = FALSE)[-1,]
names(data_frame) <- data[1,]
data_frame
})
data <- unlist(data)
list(tag = data)
}
})
# # Time-series
test <- lapply(structure$income_statistics, FUN = data_compiler)
test <- lapply(test, FUN = function(x){
if(length(x) == 3){
NULL
} else {
tag <- str_extract(unlist(x), pattern = "[A-Z]+")
data <- x[[4]][2]
data <- str_split(data, pattern = "[ =]")
data <- lapply(data, FUN = function(x){
data <- matrix(unlist(x[-length(x)]), nrow = 2)
data_frame <- data.frame(data, stringsAsFactors = FALSE)[-1,]
names(data_frame) <- data[1,]
data_frame
})
data <- unlist(data)
list(tag = data)
}
})
test <- test[!unlist(lapply(test, FUN = is.null))]
test <- lapply(test, FUN = function(x){
if(length(x) == 3){
NULL
} else {
tag <- str_extract(unlist(x), pattern = "[A-Z]+")
data <- x[[4]][2]
data <- str_split(data, pattern = "[ =]")
data <- lapply(data, FUN = function(x){
data <- matrix(unlist(x[-length(x)]), nrow = 2)
data_frame <- data.frame(data, stringsAsFactors = FALSE)[-1,]
names(data_frame) <- data[1,]
data_frame
})
data <- unlist(data)
}
})
# # Time-series
test <- lapply(structure$income_statistics, FUN = data_compiler)
test <- lapply(test, FUN = function(x){
if(length(x) == 3){
NULL
} else {
tag <- str_extract(unlist(x), pattern = "[A-Z]+")
data <- x[[4]][2]
data <- str_split(data, pattern = "[ =]")
data <- lapply(data, FUN = function(x){
data <- matrix(unlist(x[-length(x)]), nrow = 2)
data_frame <- data.frame(data, stringsAsFactors = FALSE)[-1,]
names(data_frame) <- data[1,]
data_frame
})
data <- unlist(data)
}
})
# # Time-series
test <- lapply(structure$income_statistics, FUN = data_compiler)
test <- lapply(test, FUN = function(x){
if(length(x) == 3){
NULL
} else {
tag <- str_extract(unlist(x), pattern = "[A-Z]+")
data <- x[[4]][2]
data <- str_split(data, pattern = "[ =]")
data <- lapply(data, FUN = function(x){
data <- matrix(unlist(x[-length(x)]), nrow = 2)
data_frame <- data.frame(data, stringsAsFactors = FALSE)[-1,]
names(data_frame) <- data[1,]
data_frame
})
data <- as.data.frame(unlist(data))
}
})
# # Time-series
test <- lapply(structure$income_statistics, FUN = data_compiler)
test <- lapply(test, FUN = function(x){
if(length(x) == 3){
NULL
} else {
tag <- str_extract(unlist(x), pattern = "[A-Z]+")
data <- x[[4]][2]
data <- str_split(data, pattern = "[ =]")
data <- lapply(data, FUN = function(x){
data <- matrix(unlist(x[-length(x)]), nrow = 2)
data_frame <- data.frame(data, stringsAsFactors = FALSE)[-1,]
names(data_frame) <- data[1,]
data_frame
})
data <- as.data.frame(unlist(data), stringsAsFactors = FALSE)
}
})
View(test)
# # Time-series
test <- lapply(structure$income_statistics, FUN = data_compiler)
test <- lapply(test, FUN = function(x){
if(length(x) == 3){
NULL
} else {
tag <- str_extract(unlist(x), pattern = "[A-Z]+")
data <- x[[4]][2]
data <- str_split(data, pattern = "[ =]")
data <- lapply(data, FUN = function(x){
data <- matrix(unlist(x[-length(x)]), nrow = 2)
data_frame <- data.frame(data, stringsAsFactors = FALSE)[-1,]
names(data_frame) <- data[1,]
data_frame
})
data <- as.data.frame(unlist(data), stringsAsFactors = FALSE)
rownames(data) <- tag
data
}
})
# # Time-series
test <- lapply(structure$income_statistics, FUN = data_compiler)
test <- lapply(test, FUN = function(x){
if(length(x) == 3){
NULL
} else {
tag <- str_extract(unlist(x), pattern = "[A-Z]+")
data <- x[[4]][2]
data <- str_split(data, pattern = "[ =]")
data <- lapply(data, FUN = function(x){
data <- matrix(unlist(x[-length(x)]), nrow = 2)
data_frame <- data.frame(data, stringsAsFactors = FALSE)[-1,]
names(data_frame) <- data[1,]
data_frame
})
data <- as.data.frame(unlist(data), stringsAsFactors = FALSE)
# rownames(data) <- tag
data
}
})
View(test)
# # Time-series
test <- lapply(structure$income_statistics, FUN = data_compiler)
test <- lapply(test, FUN = function(x){
if(length(x) == 3){
NULL
} else {
tag <- str_extract(unlist(x), pattern = "[A-Z]+")
data <- x[[4]][2]
data <- str_split(data, pattern = "[ =]")
data <- lapply(data, FUN = function(x){
data <- matrix(unlist(x[-length(x)]), nrow = 2)
data_frame <- data.frame(data, stringsAsFactors = FALSE)[-1,]
names(data_frame) <- data[1,]
data_frame
})
data <- as.data.frame(t(unlist(data)), stringsAsFactors = FALSE)
# rownames(data) <- tag
data
}
})
# # Time-series
test <- lapply(structure$income_statistics, FUN = data_compiler)
test <- lapply(test, FUN = function(x){
if(length(x) == 3){
NULL
} else {
tag <- str_extract(unlist(x), pattern = "[A-Z]+")
data <- x[[4]][2]
data <- str_split(data, pattern = "[ =]")
data <- lapply(data, FUN = function(x){
data <- matrix(unlist(x[-length(x)]), nrow = 2)
data_frame <- data.frame(data, stringsAsFactors = FALSE)[-1,]
names(data_frame) <- data[1,]
data_frame
})
data <- as.data.frame(t(unlist(data)), stringsAsFactors = FALSE)
data$tag <- tag
data
}
})
# # Time-series
test <- lapply(structure$income_statistics, FUN = data_compiler)
test <- lapply(test, FUN = function(x){
if(length(x) == 3){
NULL
} else {
tag <- str_extract(unlist(x), pattern = "[A-Z]+")
data <- x[[4]][2]
data <- str_split(data, pattern = "[ =]")
data <- lapply(data, FUN = function(x){
data <- matrix(unlist(x[-length(x)]), nrow = 2)
data_frame <- data.frame(data, stringsAsFactors = FALSE)[-1,]
names(data_frame) <- data[1,]
data_frame
})
data <- as.data.frame(t(unlist(data)), stringsAsFactors = FALSE)
data$tag <- tag[!is.na(tag)]
data
}
})
ts_list <- ts_list[!unlist(lapply(ts_list, FUN = is.null))]
# # Time-series
ts_list <- lapply(structure$income_statistics, FUN = data_compiler)
ts_list <- lapply(ts_list, FUN = function(x){
if(length(x) == 3){
NULL
} else {
tag <- str_extract(unlist(x), pattern = "[A-Z]+")
data <- x[[4]][2]
data <- str_split(data, pattern = "[ =]")
data <- lapply(data, FUN = function(x){
data <- matrix(unlist(x[-length(x)]), nrow = 2)
data_frame <- data.frame(data, stringsAsFactors = FALSE)[-1,]
names(data_frame) <- data[1,]
data_frame
})
data <- as.data.frame(t(unlist(data)), stringsAsFactors = FALSE)
data$tag <- tag[!is.na(tag)]
data
}
})
ts_list <- ts_list[!unlist(lapply(ts_list, FUN = is.null))]
ts_list
ts_data <- do.call(rbind, ts_list)
unlist(lapply(ts_list, FUN = is.null)
)
variables <- unlist(lapply(ts_list, colnames))
data_frame <- as.data.frame(matrix("", ncol = length(unique(variables))), stringsAsFactors = FALSE)
colnames(data_frame) <- unique(variables)
for(i in 1:length(ts_list)){
x <- ts_list[[i]]
index <- which(colnames(data_frame) %in% colnames(x))
temp <- data_frame[1,]
temp[, index] <- x[, colnames(data_frame)[index]]
data_frame <- rbind(data_frame, temp)
if(i == length(data_list)){
data_frame <- data_frame[-1,]
}
}
for(i in 1:length(ts_list)){
x <- ts_list[[i]]
index <- which(colnames(data_frame) %in% colnames(x))
temp <- data_frame[1,]
temp[, index] <- x[, colnames(data_frame)[index]]
data_frame <- rbind(data_frame, temp)
if(i == length(ts_list)){
data_frame <- data_frame[-1,]
}
}
num_indices <- apply(data_frame,
MARGIN = 2,
FUN = function(x){
!any(str_detect(x, pattern = "[a-zA-Z]"))
})
data_frame[,num_indices] <- suppressWarnings(sapply(data_frame[, num_indices], FUN = as.numeric))
View(data_frame)
############################
### Time-series data
############################
ts_compiler <- function(ts){
ts_list <- lapply(ts, FUN = data_compiler)
ts_list <- lapply(ts_list, FUN = function(x){
if(length(x) == 3){
NULL
} else {
tag <- str_extract(unlist(x), pattern = "[A-Z]+")
data <- x[[4]][2]
data <- str_split(data, pattern = "[ =]")
data <- lapply(data, FUN = function(x){
data <- matrix(unlist(x[-length(x)]), nrow = 2)
data_frame <- data.frame(data, stringsAsFactors = FALSE)[-1,]
names(data_frame) <- data[1,]
data_frame
})
data <- as.data.frame(t(unlist(data)), stringsAsFactors = FALSE)
data$tag <- tag[!is.na(tag)]
data
}
})
ts_list <- ts_list[!unlist(lapply(ts_list, FUN = is.null))]
variables <- unlist(lapply(ts_list, colnames))
data_frame <- as.data.frame(matrix("", ncol = length(unique(variables))), stringsAsFactors = FALSE)
colnames(data_frame) <- unique(variables)
for(i in 1:length(ts_list)){
x <- ts_list[[i]]
index <- which(colnames(data_frame) %in% colnames(x))
temp <- data_frame[1,]
temp[, index] <- x[, colnames(data_frame)[index]]
data_frame <- rbind(data_frame, temp)
if(i == length(ts_list)){
data_frame <- data_frame[-1,]
}
}
num_indices <- apply(data_frame,
MARGIN = 2,
FUN = function(x){
!any(str_detect(x, pattern = "[a-zA-Z]"))
})
data_frame[,num_indices] <- suppressWarnings(sapply(data_frame[, num_indices], FUN = as.numeric))
return(data_frame)
}
##########################################################################
### Time-series data
##########################################################################
ts_lists <- list(structure$income_statistics,
structure$nation_size_statistics,
structure$score_statistics,
structure$inflation_statistics)
##########################################################################
### Time-series data
##########################################################################
ts_lists <- list(income = structure$income_statistics,
nation_size = structure$nation_size_statistics,
score = structure$score_statistics,
inflation = structure$inflation_statistics)
ts_lists <- lapply(ts_lists, ts_compiler)
gather(data_frame, key = tag)
gather(data_frame, key = "year", value = "tag")
gather(data_frame, tag)
gather(data_frame, -tag)
gather_(data_frame, tag)
gather_(data_frame)
gather_(data_frame, key_col = tag)
gather_(data_frame, key_col = "tag")
gather_(data_frame, key_col = "tag", value_col = "1444")
gather_(data_frame, key_col = "tag", value_col = "test", gather_cols = "1444")
gather(data_frame, "year", "value", -"tag")
data_frame <- gather(data_frame, "year", "value", -"tag")
data_frame$year <- as.numeric(data_frame$year)
############################
### Time-series data
############################
ts_compiler <- function(ts){
ts_list <- lapply(ts, FUN = data_compiler)
ts_list <- lapply(ts_list, FUN = function(x){
if(length(x) == 3){
NULL
} else {
tag <- str_extract(unlist(x), pattern = "[A-Z]+")
data <- x[[4]][2]
data <- str_split(data, pattern = "[ =]")
data <- lapply(data, FUN = function(x){
data <- matrix(unlist(x[-length(x)]), nrow = 2)
data_frame <- data.frame(data, stringsAsFactors = FALSE)[-1,]
names(data_frame) <- data[1,]
data_frame
})
data <- as.data.frame(t(unlist(data)), stringsAsFactors = FALSE)
data$tag <- tag[!is.na(tag)]
data
}
})
ts_list <- ts_list[!unlist(lapply(ts_list, FUN = is.null))]
variables <- unlist(lapply(ts_list, colnames))
data_frame <- as.data.frame(matrix("", ncol = length(unique(variables))), stringsAsFactors = FALSE)
colnames(data_frame) <- unique(variables)
for(i in 1:length(ts_list)){
x <- ts_list[[i]]
index <- which(colnames(data_frame) %in% colnames(x))
temp <- data_frame[1,]
temp[, index] <- x[, colnames(data_frame)[index]]
data_frame <- rbind(data_frame, temp)
if(i == length(ts_list)){
data_frame <- data_frame[-1,]
}
}
num_indices <- apply(data_frame,
MARGIN = 2,
FUN = function(x){
!any(str_detect(x, pattern = "[a-zA-Z]"))
})
data_frame[,num_indices] <- suppressWarnings(sapply(data_frame[, num_indices], FUN = as.numeric))
data_frame <- gather(data_frame, "year", "value", -"tag")
data_frame$year <- as.numeric(data_frame$year)
return(data_frame)
}
ts_lists <- list(income = structure$income_statistics,
nation_size = structure$nation_size_statistics,
score = structure$score_statistics,
inflation = structure$inflation_statistics)
ts_lists <- lapply(ts_lists, ts_compiler)
human_country <- game_data$country$tag[which(game_data$country$was_player == "yes"),]
human_country <- game_data$country$tag[which(game_data$country$was_player == "yes")]
human_country
## Setting the WD to the local directory of the Git.
setwd("F:/GitHubs/eu4_save_analysis")
# Sourcing the scraper and compiler scripts
# source("save_scraper.R")
source("functions.R")
# source("data_compiler.R")
## Loading the required packages
require(shiny, quietly = TRUE)
require(shinythemes, quietly = TRUE)
require(stringr, quietly = TRUE)
require(ggplot2, quietly = TRUE)
require(dplyr, quietly = TRUE)
require(tidyr, quietly = TRUE)
require(stringr, quietly = TRUE)
require(parallel, quietly = TRUE)
require(shinycssloaders, quietly = TRUE)
require(DT, quietly = TRUE)
##
save <- readLines(con = "C:/Users/Canadice/Documents/Paradox Interactive/Europa Universalis IV/save games/Summerburst Session 1.eu4", encoding = "ANSI", warn = FALSE)
game_data <- save_processing(save)
save(game_data, file = "latest.RData")
names(game_data$time_series)
names(game_data$time_series$income)
data <- lapply(game_data$time_series, FUN = function(x, name){
x <- x[x$tag %in% human_country,]
x$var <- name
}, name = names(game_data$time_series))
seq_along(game_data$time_series)
data <- lapply(seq_along(game_data$time_series), FUN = function(x, name, i){
x_reduced <- x[[i]]
x_reduced <- x_reduced[x_reduced$tag %in% human_country,]
x_reduced$var <- name[[i]]
x_reduced
}, name = names(game_data$time_series)), x = game_data$time_series
data <- lapply(seq_along(game_data$time_series), FUN = function(x, name, i){
x_reduced <- x[[i]]
x_reduced <- x_reduced[x_reduced$tag %in% human_country,]
x_reduced$var <- name[[i]]
x_reduced
}, name = names(game_data$time_series), x = game_data$time_series)
data <- do.call(rbind, data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
require(RColorBrewer, quietly = TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
require(plotly, quietly = TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
plotly_example("shiny", "ggplotly_sizing")
runApp()
runApp()
runApp()
runApp()
runApp()
## Setting the WD to the local directory of the Git.
setwd("F:/GitHubs/eu4_save_analysis")
# Sourcing the scraper and compiler scripts
# source("save_scraper.R")
source("functions.R")
# source("data_compiler.R")
## Loading the required packages
require(shiny, quietly = TRUE)
require(shinythemes, quietly = TRUE)
require(stringr, quietly = TRUE)
require(ggplot2, quietly = TRUE)
require(dplyr, quietly = TRUE)
require(tidyr, quietly = TRUE)
require(stringr, quietly = TRUE)
require(parallel, quietly = TRUE)
require(shinycssloaders, quietly = TRUE)
require(DT, quietly = TRUE)
##
save <- readLines(con = "C:/Users/Canadice/Documents/Paradox Interactive/Europa Universalis IV/save games/Summerburst Session 1.eu4", encoding = "ANSI", warn = FALSE)
game_data <- save_processing(save)
save(game_data, file = "latest.RData")
runApp()
